using Contable.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace Contable.Migrations.Seed.Application
{
    public class DefaultProcedureBuilder
    {
        private readonly ContableDbContext _context;

        public DefaultProcedureBuilder(ContableDbContext context)
        {
            _context = context;
        }

        public void Create()
        {

			//V1
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_pip_filter]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_pip_filter]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_pip_filter] 
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @SOCIALCONFLICT INT = NULL
AS 
BEGIN

SET @TERRITORIAL     = ISNULL(@TERRITORIAL, 0) 
SET @DEPARTMENT      = ISNULL(@DEPARTMENT, 0) 
SET @PROVINCE        = ISNULL(@PROVINCE, 0) 
SET @SOCIALCONFLICT  = ISNULL(@SOCIALCONFLICT, 0) 

SELECT ISNULL(AP.ID, 0) AS ID, [S].[TYPE] AS [TYPE], SUM(ISNULL(PM.UPDATEDCOST, 0)) AS TOTAL FROM APPCOMPROMISELOCATIONS AC
INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL
ON AC.SOCIALCONFLICTLOCATIONID = SCL.ID
INNER JOIN APPCOMPROMISES C
ON C.ID = AC.COMPROMISEID
INNER JOIN APPPIPMEF PM
ON PM.ID = C.PIPMEFID
LEFT JOIN APPPARAMETER AP
ON AP.ID = PM.PIPPHASEID 
INNER JOIN APPPARAMETER S
ON S.ID = C.STATUSID 
WHERE SCL.TERRITORIALUNITID   = (CASE WHEN @TERRITORIAL    > 0 THEN @TERRITORIAL    ELSE SCL.TERRITORIALUNITID END) AND
		SCL.DEPARTMENTID      = (CASE WHEN @DEPARTMENT     > 0 THEN @DEPARTMENT     ELSE SCL.DEPARTMENTID      END) AND
		SCL.PROVINCEID        = (CASE WHEN @PROVINCE       > 0 THEN @PROVINCE       ELSE SCL.PROVINCEID        END) AND
	    SCL.SOCIALCONFLICTID  = (CASE WHEN @SOCIALCONFLICT > 0 THEN @SOCIALCONFLICT ELSE SCL.SOCIALCONFLICTID  END) 
GROUP BY C.ID, AP.ID, [S].[TYPE] 

END;");
			_context.Database.ExecuteSqlRaw(
@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_zones]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_zones]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_zones]
@TYPE VARCHAR(2)
AS
BEGIN

--UNIDAD TERRITORIAL
IF @TYPE = 'TU'
BEGIN

	SELECT [B].[Id] FROM (
		SELECT [TU].[ID] FROM APPCOMPROMISES C
		JOIN APPCOMPROMISELOCATIONS CL 
		ON CL.COMPROMISEID  = C.ID
		JOIN APPSOCIALCONFLICTLOCATIONS SCL 
		ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
		JOIN APPSOCIALCONFLICTS SC 
		ON SC.ID = SCL.SOCIALCONFLICTID
		JOIN APPTERRITORIALUNITS TU 
		ON TU.ID = SCL.TERRITORIALUNITID
		GROUP BY TU.[Id]
		UNION ALL 
		SELECT [TU].[Id] FROM [AppSocialConflictAlerts] [SS]
		JOIN [AppSocialConflictAlertLocations] [SL]
		ON [SL].[SocialConflictAlertId] = [SS].[Id]
		INNER JOIN [AppTerritorialUnits] [TU]
		ON [TU].[Id] = [SL].[TerritorialUnitId]
		WHERE [SS].[IsDeleted] = 0 AND 
			  [TU].[IsDeleted] = 0
		GROUP BY [TU].[Id]) 
	AS B
	GROUP BY [B].[Id]
	ORDER BY [B].[Id]

END
	
--DEPARTAMENTO
IF @TYPE = 'DE'
BEGIN
	SELECT [B].[Id] FROM (
		SELECT [DE].[Id]
		FROM APPCOMPROMISES C
		INNER JOIN APPCOMPROMISELOCATIONS CL 
		ON CL.COMPROMISEID  = C.ID
		INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL 
		ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
		INNER JOIN APPSOCIALCONFLICTS SC 
		ON SC.ID = SCL.SOCIALCONFLICTID
		INNER JOIN APPDEPARTMENTS DE 
		ON DE.ID = SCL.DEPARTMENTID
		GROUP BY DE.[Id]
		UNION ALL 
		SELECT [DE].[Id] FROM [AppSocialConflictAlerts] [SS]
		JOIN [AppSocialConflictAlertLocations] [SL]
		ON [SL].[SocialConflictAlertId] = [SS].[Id]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [SL].[DepartmentId]
		WHERE [SS].[IsDeleted] = 0 AND 
			  [DE].[IsDeleted] = 0
		GROUP BY [DE].[Id]) 
	AS B
	GROUP BY [B].[Id]
	ORDER BY [B].[Id]

END

--PROVINCIA
IF @TYPE = 'PR' 
BEGIN

	SELECT [B].[Id] FROM (
		SELECT [PR].[ID]
		FROM APPCOMPROMISES C
		JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
		JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
		JOIN APPSOCIALCONFLICTS SC ON SC.ID = SCL.SOCIALCONFLICTID
		JOIN APPPROVINCES PR ON PR.ID = SCL.PROVINCEID 
		GROUP BY [PR].[ID]
		UNION ALL 
		SELECT [PR].[Id] FROM [AppSocialConflictAlerts] [SS]
		JOIN [AppSocialConflictAlertLocations] [SL]
		ON [SL].[SocialConflictAlertId] = [SS].[Id]
		INNER JOIN [AppProvinces] [PR]
		ON [PR].[Id] = [SL].[ProvinceId]
		WHERE [SS].[IsDeleted] = 0 AND 
			  [PR].[IsDeleted] = 0
		GROUP BY [PR].[Id]) 
	AS B
	GROUP BY [B].[Id]
	ORDER BY [B].[Id]

END

--DISTRITOS
IF @TYPE = 'DI' 
BEGIN

	SELECT [DI].[ID]
	FROM APPCOMPROMISES C
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPSOCIALCONFLICTS SC ON SC.ID = SCL.SOCIALCONFLICTID
	JOIN APPDISTRICTS DI ON DI.ID = SCL.DISTRICTID 
	GROUP BY [DI].[ID]
	ORDER BY [DI].[ID]

END

--CONFLICTO SOCIAL
IF @TYPE = 'SC'
BEGIN
	SELECT [B].[Id] FROM (
		SELECT [SC].[ID]
		FROM APPCOMPROMISES C
		JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
		JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
		JOIN APPSOCIALCONFLICTS SC ON SC.ID = SCL.SOCIALCONFLICTID
		JOIN APPDISTRICTS DI ON DI.ID = SCL.DISTRICTID 
		GROUP BY [SC].[ID]
		UNION ALL
		SELECT [A].[SocialConflictId] AS [Id] FROM [AppSocialConflictAlerts] [A]
		WHERE [A].[IsDeleted] = 0 AND
			  [A].[SocialConflictId] IS NOT NULL
		GROUP BY [A].[SocialConflictId]) 
	AS B
	GROUP BY [B].[Id]
	ORDER BY [B].[Id]

END

END;");
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_responsible]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_responsible]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_responsible]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @CONFLICT INT = NULL    
AS
BEGIN

DECLARE @STATUS VARCHAR(20) = 'ABIERTO%';

SET @TERRITORIAL = ISNULL(@TERRITORIAL, -1)
SET @DEPARTMENT  = ISNULL(@DEPARTMENT, -1)
SET @PROVINCE    = ISNULL(@PROVINCE, -1)
SET @CONFLICT    = ISNULL(@CONFLICT, -1)

SELECT [RA].[Name], [C].[Type], COUNT(DISTINCT [C].[Id]) AS 'COUNT'
FROM [AppCompromises] [C]
JOIN [AppResponsibleActors] [RA] ON [RA].[Id] = [C].[ResponsibleActorId]
JOIN [AppCompromiseLocations] [CL] ON [CL].COMPROMISEID  = [C].[Id]
JOIN [AppSocialConflictLocations] [SCL] ON [SCL].[Id] = [CL].[SocialConflictLocationId]
JOIN [AppRecords] [R] ON R.ID = [C].[RecordId] 
JOIN [AppSocialConflicts] [SC] ON [SC].[Id] = [R].[SocialConflictId]
JOIN [AppParameter] [P] ON [P].[Id] = [C].[StatusId]
WHERE [P].[Value] LIKE @STATUS AND 
	  (@TERRITORIAL <= 0 OR [SCL].[TerritorialUnitId] = @TERRITORIAL) AND 
	  (@DEPARTMENT  <= 0 OR [SCL].[DepartmentId]      = @DEPARTMENT ) AND 
	  (@PROVINCE    <= 0 OR [SCL].[ProvinceId]        = @PROVINCE   ) AND  
	  (@CONFLICT    <= 0 OR [SCL].[SocialConflictId]  = @CONFLICT   )
GROUP BY [RA].[Name], [C].[Type]
ORDER BY [RA].[Name] 

END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_responsible_status]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_responsible_status]
END");

_context.Database.ExecuteSqlRaw(@"CREATE PROCEDURE [DBO].[report_responsible_status]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @DISTRICT INT = NULL, @CONFLICT INT = NULL    
AS
BEGIN 
	IF (@CONFLICT = 0) BEGIN
		SET @CONFLICT  = NULL;
	END;
	IF (ISNULL(@TERRITORIAL, 0) = 0) BEGIN
		SELECT NAME, [TYPE], COUNT(ID) AS 'TOTAL', SUM(CASE WHEN STATUSID = 7 THEN 1 ELSE 0 END) AS 'COMPLIMENTS'
		FROM 
			(SELECT DISTINCT C.ID, C.[TYPE], C.STATUSID, UPPER(ISNULL(RA.[NAME], 'SIN RESPONSABLE')) AS [NAME] 
			FROM APPCOMPROMISES C
			INNER JOIN APPPARAMETER P ON P.ID = C.STATUSID 
			LEFT JOIN APPRESPONSIBLEACTORS RA ON RA.ID = C.RESPONSIBLEACTORID
			INNER JOIN APPRECORDS R ON R.ID = C.RECORDID 
			INNER JOIN APPSOCIALCONFLICTS SC ON SC.ID = R.SOCIALCONFLICTID
			WHERE SC.ID = ISNULL(@CONFLICT, SC.ID)
			) T
		GROUP BY NAME, [TYPE];
	END 
	ELSE IF (ISNULL(@DEPARTMENT, 0) = 0) BEGIN
		SELECT NAME, [TYPE], COUNT(ID) AS 'TOTAL', SUM(CASE WHEN STATUSID = 7 THEN 1 ELSE 0 END) AS 'COMPLIMENTS'
		FROM 
			(SELECT DISTINCT C.ID, C.[TYPE], C.STATUSID, UPPER(ISNULL(RA.[NAME], 'SIN RESPONSABLE')) AS [NAME] 
			FROM APPCOMPROMISES C
			INNER JOIN APPPARAMETER P ON P.ID = C.STATUSID 
			LEFT JOIN APPRESPONSIBLEACTORS RA ON RA.ID = C.RESPONSIBLEACTORID
			INNER JOIN APPRECORDS R ON R.ID = C.RECORDID 
			INNER JOIN APPSOCIALCONFLICTS SC ON SC.ID = R.SOCIALCONFLICTID
			INNER JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
			INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
			WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SC.ID = ISNULL(@CONFLICT, SC.ID)
			) T
		GROUP BY NAME, [TYPE];
	END
	ELSE IF (ISNULL(@PROVINCE, 0) = 0) BEGIN
		SELECT NAME, [TYPE], COUNT(ID) AS 'TOTAL', SUM(CASE WHEN STATUSID = 7 THEN 1 ELSE 0 END) AS 'COMPLIMENTS'
		FROM 
			(SELECT DISTINCT C.ID, C.[TYPE], C.STATUSID, UPPER(ISNULL(RA.[NAME], 'SIN RESPONSABLE')) AS [NAME] 
			FROM APPCOMPROMISES C
			INNER JOIN APPPARAMETER P ON P.ID = C.STATUSID 
			LEFT JOIN APPRESPONSIBLEACTORS RA ON RA.ID = C.RESPONSIBLEACTORID
			INNER JOIN APPRECORDS R ON R.ID = C.RECORDID 
			INNER JOIN APPSOCIALCONFLICTS SC ON SC.ID = R.SOCIALCONFLICTID
			INNER JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
			INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
			WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SC.ID = ISNULL(@CONFLICT, SC.ID)
			) T
		GROUP BY NAME, [TYPE];
	END
	ELSE IF (ISNULL(@DISTRICT, 0) = 0) BEGIN
		SELECT NAME, [TYPE], COUNT(ID) AS 'TOTAL', SUM(CASE WHEN STATUSID = 7 THEN 1 ELSE 0 END) AS 'COMPLIMENTS'
		FROM 
			(SELECT DISTINCT C.ID, C.[TYPE], C.STATUSID, UPPER(ISNULL(RA.[NAME], 'SIN RESPONSABLE')) AS [NAME] 
			FROM APPCOMPROMISES C
			INNER JOIN APPPARAMETER P ON P.ID = C.STATUSID 
			LEFT JOIN APPRESPONSIBLEACTORS RA ON RA.ID = C.RESPONSIBLEACTORID
			INNER JOIN APPRECORDS R ON R.ID = C.RECORDID 
			INNER JOIN APPSOCIALCONFLICTS SC ON SC.ID = R.SOCIALCONFLICTID
			INNER JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
			INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
			WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SCL.PROVINCEID = @PROVINCE AND SC.ID = ISNULL(@CONFLICT, SC.ID)
			) T
		GROUP BY NAME, [TYPE];
	END
	ELSE BEGIN
		SELECT NAME, [TYPE], COUNT(ID) AS 'TOTAL', SUM(CASE WHEN STATUSID = 7 THEN 1 ELSE 0 END) AS 'COMPLIMENTS'
		FROM 
			(SELECT DISTINCT C.ID, C.[TYPE], C.STATUSID, UPPER(ISNULL(RA.[NAME], 'SIN RESPONSABLE')) AS [NAME] 
			FROM APPCOMPROMISES C
			INNER JOIN APPPARAMETER P ON P.ID = C.STATUSID 
			LEFT JOIN APPRESPONSIBLEACTORS RA ON RA.ID = C.RESPONSIBLEACTORID
			INNER JOIN APPRECORDS R ON R.ID = C.RECORDID 
			INNER JOIN APPSOCIALCONFLICTS SC ON SC.ID = R.SOCIALCONFLICTID
			INNER JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
			INNER JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
			WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SCL.PROVINCEID = @PROVINCE AND SCL.DISTRICTID = @DISTRICT AND SC.ID = ISNULL(@CONFLICT, SC.ID)
			) T
		GROUP BY NAME, [TYPE];
	END
END;");
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_status]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_status]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_status]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL,  @CONFLICT INT = NULL, @DISTRICT INT = NULL  
AS
BEGIN		
SET @TERRITORIAL     = ISNULL(@TERRITORIAL, 0) 
SET @DEPARTMENT      = ISNULL(@DEPARTMENT, 0) 
SET @PROVINCE        = ISNULL(@PROVINCE, 0) 
SET @DISTRICT        = ISNULL(@DISTRICT, 0) 
SET @CONFLICT        = ISNULL(@CONFLICT, 0) 

SELECT T.STATUS, COUNT(DISTINCT T.ID) AS 'COUNT' 
FROM 
(
	SELECT C.ID, LEFT(P.VALUE,CASE WHEN CHARINDEX('/',P.VALUE) = 0 THEN LEN(P.VALUE) ELSE  CHARINDEX('/',P.VALUE) - 1 END) AS STATUS
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
	JOIN APPRECORDS R ON R.ID = C.RECORDID 
	WHERE SCL.TERRITORIALUNITID = CASE WHEN @TERRITORIAL > 0 THEN @TERRITORIAL ELSE SCL.TERRITORIALUNITID END AND 
	      SCL.DEPARTMENTID      = CASE WHEN @DEPARTMENT  > 0 THEN @DEPARTMENT  ELSE SCL.DEPARTMENTID      END AND  
		  SCL.PROVINCEID        = CASE WHEN @PROVINCE    > 0 THEN @PROVINCE    ELSE SCL.PROVINCEID        END AND
		  SCL.DISTRICTID        = CASE WHEN @DISTRICT    > 0 THEN @DISTRICT    ELSE SCL.DISTRICTID        END AND 
		  SCL.SOCIALCONFLICTID  = CASE WHEN @CONFLICT    > 0 THEN @CONFLICT    ELSE SCL.SOCIALCONFLICTID  END 
) T
GROUP BY T.STATUS

END;");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_status_close]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_status_close]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_status_close]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @CONFLICT INT = NULL, @DISTRICT INT = NULL 
AS
BEGIN

DECLARE @STATUS VARCHAR(20) = 'CERRADO%';
	
SET @TERRITORIAL = ISNULL(@TERRITORIAL, 0)
SET @DEPARTMENT  = ISNULL(@DEPARTMENT, 0)
SET @PROVINCE    = ISNULL(@PROVINCE, 0)
SET @DISTRICT        = ISNULL(@DISTRICT, 0) 
SET @CONFLICT    = ISNULL(@CONFLICT, 0)

SELECT T.STATUS, COUNT(DISTINCT T.ID) AS 'COUNT'
FROM 
(
	SELECT C.ID, LTRIM(RTRIM(REPLACE(REPLACE(P.VALUE, 'CERRADO', ''), '/', ''))) AS STATUS
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
	JOIN APPRECORDS R ON R.ID = C.RECORDID 
	WHERE P.[VALUE] LIKE @STATUS AND
		  SCL.TERRITORIALUNITID = CASE WHEN @TERRITORIAL > 0 THEN @TERRITORIAL ELSE SCL.TERRITORIALUNITID END AND 
		  SCL.DEPARTMENTID      = CASE WHEN @DEPARTMENT  > 0 THEN @DEPARTMENT  ELSE SCL.DEPARTMENTID      END AND 
		  SCL.PROVINCEID        = CASE WHEN @PROVINCE    > 0 THEN @PROVINCE    ELSE SCL.PROVINCEID        END AND 
		  SCL.DISTRICTID        = CASE WHEN @DISTRICT    > 0 THEN @DISTRICT    ELSE SCL.DISTRICTID        END AND
		  SCL.SOCIALCONFLICTID  = CASE WHEN @CONFLICT    > 0 THEN @CONFLICT    ELSE SCL.SOCIALCONFLICTID  END
) T
GROUP BY T.STATUS;

END;");

		_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_status_open]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_status_open]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_status_open]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @CONFLICT INT = NULL, @DISTRICT INT = NULL
AS
BEGIN

DECLARE @STATUS VARCHAR(20) = 'ABIERTO%';
	
SET @TERRITORIAL = ISNULL(@TERRITORIAL, 0)
SET @DEPARTMENT  = ISNULL(@DEPARTMENT, 0)
SET @PROVINCE    = ISNULL(@PROVINCE, 0)
SET @DISTRICT        = ISNULL(@DISTRICT, 0) 
SET @CONFLICT    = ISNULL(@CONFLICT, 0)

SELECT T.STATUS, COUNT(DISTINCT T.ID) AS 'COUNT'
FROM 
(
	SELECT C.ID, LTRIM(RTRIM(REPLACE(REPLACE(P.VALUE, 'ABIERTO', ''), '/', ''))) AS STATUS
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
	JOIN APPRECORDS R ON R.ID = C.RECORDID 
	WHERE P.[VALUE] LIKE @STATUS AND
		  SCL.TERRITORIALUNITID = CASE WHEN @TERRITORIAL > 0 THEN @TERRITORIAL ELSE SCL.TERRITORIALUNITID END AND 
		  SCL.DEPARTMENTID      = CASE WHEN @DEPARTMENT  > 0 THEN @DEPARTMENT  ELSE SCL.DEPARTMENTID      END AND 
		  SCL.PROVINCEID        = CASE WHEN @PROVINCE    > 0 THEN @PROVINCE    ELSE SCL.PROVINCEID        END AND  
		  SCL.DISTRICTID        = CASE WHEN @DISTRICT    > 0 THEN @DISTRICT    ELSE SCL.DISTRICTID        END AND
		  SCL.SOCIALCONFLICTID  = CASE WHEN @CONFLICT    > 0 THEN @CONFLICT    ELSE SCL.SOCIALCONFLICTID  END
) T
GROUP BY T.STATUS;

END;");

	_context.Database.ExecuteSqlRaw(
@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_SUMMARY]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[REPORT_SUMMARY]
END");

	_context.Database.ExecuteSqlRaw(
@"
CREATE PROCEDURE [dbo].[report_summary]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @SOCIALCONFLICT INT = NULL
AS
BEGIN	

SET @TERRITORIAL     = ISNULL(@TERRITORIAL, 0) 
SET @DEPARTMENT      = ISNULL(@DEPARTMENT, 0) 
SET @PROVINCE        = ISNULL(@PROVINCE, 0) 
SET @SOCIALCONFLICT  = ISNULL(@SOCIALCONFLICT, 0) 

--SIN FILTROS
IF (@TERRITORIAL = 0 AND @DEPARTMENT = 0 AND @PROVINCE = 0) 
BEGIN	
	SELECT [TU].[NAME], [C].[TYPE] AS 'TYPE', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPCOMPROMISELOCATIONS CL 
	ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL 
	ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPSOCIALCONFLICTS SC 
	ON SC.ID = SCL.SOCIALCONFLICTID
	JOIN APPTERRITORIALUNITS TU 
	ON TU.ID = SCL.TERRITORIALUNITID
	WHERE SC.Id = (CASE WHEN @SOCIALCONFLICT > 0 THEN @SOCIALCONFLICT ELSE SC.Id END)
	GROUP BY TU.[NAME], C.[TYPE]
	ORDER BY TU.[NAME]

END 

--POR UNIDAD TERRITORIAL
IF (@TERRITORIAL > 0 AND @DEPARTMENT = 0 AND @PROVINCE = 0) 
BEGIN 
	SELECT DE.[NAME], C.[TYPE] AS 'TYPE', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPCOMPROMISELOCATIONS CL 
	ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL 
	ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPSOCIALCONFLICTS SC 
	ON SC.ID = SCL.SOCIALCONFLICTID
	JOIN APPDEPARTMENTS DE 
	ON DE.ID = SCL.DEPARTMENTID
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SC.Id = (CASE WHEN @SOCIALCONFLICT > 0 THEN @SOCIALCONFLICT ELSE SC.Id END)
	GROUP BY DE.[NAME], C.[TYPE]
	ORDER BY DE.[NAME]

END

--POR DEPARTAMENTO
IF (@TERRITORIAL > 0 AND @DEPARTMENT > 0 AND @PROVINCE = 0) 
BEGIN
	SELECT PR.[NAME], C.[TYPE] AS 'TYPE', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPSOCIALCONFLICTS SC ON SC.ID = SCL.SOCIALCONFLICTID
	JOIN APPPROVINCES PR ON PR.ID = SCL.PROVINCEID 
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SC.Id = (CASE WHEN @SOCIALCONFLICT > 0 THEN @SOCIALCONFLICT ELSE SC.Id END)
	GROUP BY PR.[NAME], C.[TYPE]
	ORDER BY PR.[NAME]
END

--POR PROVINCIA
IF (@TERRITORIAL > 0 AND @DEPARTMENT > 0 AND @PROVINCE > 0) 
BEGIN
	SELECT DI.[NAME], C.[TYPE] AS 'TYPE', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPSOCIALCONFLICTS SC ON SC.ID = SCL.SOCIALCONFLICTID
	JOIN APPDISTRICTS DI ON DI.ID = SCL.DISTRICTID 
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SCL.[PROVINCEID] = @PROVINCE AND SC.Id = (CASE WHEN @SOCIALCONFLICT > 0 THEN @SOCIALCONFLICT ELSE SC.Id END)
	GROUP BY DI.[NAME] , C.[TYPE]
	ORDER BY DI.[NAME]
END

END
");
			_context.Database.ExecuteSqlRaw(
		@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_summary_status]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_summary_status]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [DBO].[report_summary_status]
@TERRITORIAL INT = NULL, @DEPARTMENT INT = NULL, @PROVINCE INT = NULL, @DISTRICT INT = NULL  
AS
BEGIN		
SET @TERRITORIAL     = ISNULL(@TERRITORIAL, 0) 
SET @DEPARTMENT      = ISNULL(@DEPARTMENT, 0) 
SET @PROVINCE        = ISNULL(@PROVINCE, 0) 
SET @DISTRICT        = ISNULL(@DISTRICT, 0) 

IF (@TERRITORIAL = 0 AND @DEPARTMENT = 0 AND @PROVINCE = 0 AND @DISTRICT = 0) 
BEGIN	
	SELECT TU.NAME, P.VALUE AS 'STATUS', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPTERRITORIALUNITS TU ON TU.ID = SCL.TERRITORIALUNITID
	GROUP BY TU.NAME, P.VALUE
	ORDER BY TU.NAME
END 

IF (@TERRITORIAL > 0 AND @DEPARTMENT = 0 AND @PROVINCE = 0 AND @DISTRICT = 0) 
BEGIN 
	SELECT DE.NAME, P.VALUE AS 'STATUS', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C		
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID
	JOIN APPDEPARTMENTS DE ON DE.ID = SCL.DEPARTMENTID
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL
	GROUP BY DE.NAME, P.VALUE
	ORDER BY DE.NAME
END

IF (@TERRITORIAL > 0 AND @DEPARTMENT > 0 AND @PROVINCE = 0 AND @DISTRICT = 0) 
BEGIN 
	SELECT PR.NAME, P.VALUE AS 'STATUS', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPPROVINCES PR ON PR.ID = SCL.PROVINCEID 
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT
	GROUP BY PR.NAME , P.VALUE
	ORDER BY PR.NAME
END

IF (@TERRITORIAL > 0 AND @DEPARTMENT > 0 AND @PROVINCE > 0 AND @DISTRICT = 0) 
BEGIN 
	SELECT DI.NAME, P.VALUE AS 'STATUS', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPDISTRICTS DI ON DI.ID = SCL.DISTRICTID 
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SCL.PROVINCEID = @PROVINCE 
	GROUP BY DI.NAME, P.VALUE
	ORDER BY DI.NAME
END

IF (@TERRITORIAL > 0 AND @DEPARTMENT > 0 AND @PROVINCE > 0 AND @DISTRICT > 0) 
BEGIN 
	SELECT DI.NAME, P.VALUE AS 'STATUS', COUNT(DISTINCT C.ID) AS 'COUNT'
	FROM APPCOMPROMISES C
	JOIN APPPARAMETER P ON P.ID = C.STATUSID
	JOIN APPCOMPROMISELOCATIONS CL ON CL.COMPROMISEID  = C.ID
	JOIN APPSOCIALCONFLICTLOCATIONS SCL ON SCL.ID = CL.SOCIALCONFLICTLOCATIONID 
	JOIN APPDISTRICTS DI ON DI.ID = SCL.DISTRICTID 
	WHERE SCL.TERRITORIALUNITID = @TERRITORIAL AND SCL.DEPARTMENTID = @DEPARTMENT AND SCL.PROVINCEID = @PROVINCE AND SCL.DISTRICTID = @DISTRICT
	GROUP BY DI.NAME, P.VALUE
	ORDER BY DI.NAME
END

END;");
			//V2
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[process_prospective_risk]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[process_prospective_risk]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[process_prospective_risk]
@UserId BIGINT
AS
BEGIN
	INSERT INTO [DBO].[APPPROSPECTIVERISKS] ([CREATIONTIME], [CREATORUSERID], [ISDELETED], [PROVINCEID], [VALUE], [FIXRATE])
	SELECT GETDATE(), @USERID, 0, P.ID, 0, 1 FROM APPPROVINCES P
	WHERE P.ID NOT IN(SELECT R.PROVINCEID FROM APPPROSPECTIVERISKS R WHERE R.PROVINCEID = P.ID) AND
	      P.ISDELETED = 0

	INSERT INTO [DBO].[APPPROSPECTIVERISKDETAILS] ([CREATIONTIME], [CREATORUSERID], [ISDELETED], [PROSPECTIVERISKID], [STATICVARIABLEOPTIONID], [VALUE], [ENABLED])
    SELECT GETDATE(), @USERID, 0, P.ID, O.ID, 0, CASE WHEN V.[ENABLED] = 1 AND O.[ENABLED] = 1 THEN 1 ELSE 0 END FROM APPSTATICVARIABLES V
	INNER JOIN APPSTATICVARIABLEOPTIONS O
	ON O.STATICVARIABLEID = V.ID
	CROSS JOIN APPPROSPECTIVERISKS P
	WHERE V.ISDELETED = 0 AND
	      O.ISDELETED = 0 AND
		  V.FAMILY    = 1 AND
		  NOT EXISTS(SELECT ID FROM APPPROSPECTIVERISKDETAILS PD WHERE PD.STATICVARIABLEOPTIONID = O.ID AND PD.PROSPECTIVERISKID = P.ID) 
	ORDER BY 1, 2

	--UPDATE PARA VARIABLES HABILITADAS O DESHABILITADAS
	UPDATE PD SET PD.[ENABLED] = CASE WHEN V.[ENABLED] = 1 AND O.[ENABLED] = 1 THEN 1 ELSE 0 END FROM APPPROSPECTIVERISKDETAILS PD
	INNER JOIN APPSTATICVARIABLEOPTIONS O
	ON O.ID = PD.STATICVARIABLEOPTIONID
	INNER JOIN APPSTATICVARIABLES V
	ON V.ID = O.STATICVARIABLEID

	--UPDATE PARA VARIABLES ESTATICAS ASOCIADAS A UNA VARIABLE DINAMICA
	UPDATE PD SET PD.[VALUE] = DD.[VALUE] FROM APPPROSPECTIVERISKDETAILS PD
	INNER JOIN APPPROSPECTIVERISKS PR
	ON PR.ID = PD.PROSPECTIVERISKID
	INNER JOIN APPSTATICVARIABLEOPTIONS O
	ON O.ID = PD.STATICVARIABLEOPTIONID
	INNER JOIN APPSTATICVARIABLES V
	ON V.ID = O.STATICVARIABLEID
	INNER JOIN APPDINAMICVARIABLES D
	ON D.ID = O.DINAMICVARIABLEID
	INNER JOIN APPDINAMICVARIABLEDETAILS DD
	ON DD.DINAMICVARIABLEID = D.ID AND DD.PROVINCEID = PR.PROVINCEID

	--UPDATE DE VALORES DEL RIESGO PROSPECTIVO PROVINCIAL
	UPDATE R SET R.[VALUE] = ISNULL((
		SELECT CONVERT(DECIMAL(27, 2), ((SUM(D.[VALUE] * O.[VALUE])) / SUM(O.[VALUE])) * R.[FIXRATE]) 
		FROM APPPROSPECTIVERISKDETAILS D
		INNER JOIN APPSTATICVARIABLEOPTIONS  O
		ON D.STATICVARIABLEOPTIONID = O.ID
		WHERE D.[ENABLED] = 1 AND D.ISDELETED = 0 AND D.PROSPECTIVERISKID = R.ID
		GROUP BY D.PROSPECTIVERISKID),0)
	FROM APPPROSPECTIVERISKS R
END");
			
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[process_project_risk]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[process_project_risk]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[process_project_risk]
@UserId BIGINT
AS
BEGIN

	--INSERT ALL NEW VARIABLES
	INSERT INTO [DBO].[APPPROJECTRISKDETAILS] 
	([CREATIONTIME], [CREATORUSERID], [ISDELETED], [PROJECTRISKID],
	 [PROJECTSTAGEDETAILID], [STATICVARIABLEOPTIONID], [ENABLED], [VALUE])
	SELECT 
	GETDATE(), @USERID, 0, PR.ID, 
	PSD.ID, SVO.ID, 
	CASE WHEN SVO.[ENABLED] = 1 AND SV.[ENABLED] = 1 AND PS.[ENABLED] = 1 THEN 1 ELSE 0 END, 
	CASE WHEN SVO.DINAMICVARIABLEID IS NOT NULL AND DV.[VALUE] IS NOT NULL THEN DV.[VALUE] ELSE 0 END
	FROM APPPROJECTSTAGEDETAILS PSD
	INNER JOIN APPPROJECTSTAGES PS
	ON PS.ID = PSD.PROJECTSTAGEID
	INNER JOIN APPSTATICVARIABLES SV
	ON SV.ID = PSD.STATICVARIABLEID
	INNER JOIN APPSTATICVARIABLEOPTIONS SVO
	ON  SV.ID = SVO.STATICVARIABLEID
	INNER JOIN APPPROJECTRISKS PR
	ON  PR.STAGEID = PS.ID
	LEFT JOIN APPDINAMICVARIABLEDETAILS DV
	ON DV.DINAMICVARIABLEID = SVO.DINAMICVARIABLEID AND 
	   DV.PROVINCEID        = PR.PROVINCEID
	WHERE PSD.ISDELETED = 0 AND 
		  PS.ISDELETED  = 0 AND 
		  SV.ISDELETED  = 0 AND
		  SVO.ISDELETED = 0 AND
		  PR.ISDELETED  = 0 AND
		  NOT EXISTS (SELECT ID FROM APPPROJECTRISKDETAILS PRD 
					  WHERE PRD.PROJECTRISKID          = PR.ID  AND 
							PRD.PROJECTSTAGEDETAILID   = PSD.ID AND
							PRD.STATICVARIABLEOPTIONID = SVO.ID)

	--UPDATE ENABLED STATE AND VALUE
	UPDATE PRD SET 
	PRD.[ENABLED] = CASE WHEN SVO.[ENABLED] = 1 AND SV.[ENABLED] = 1 AND PS.[ENABLED] = 1 THEN 1 ELSE 0 END,
	PRD.[VALUE]   = CASE WHEN SVO.DINAMICVARIABLEID IS NOT NULL AND DV.[VALUE] IS NOT NULL THEN DV.[VALUE] ELSE PRD.[VALUE] END
	FROM APPPROJECTRISKDETAILS PRD 
	INNER JOIN APPPROJECTRISKS PR
	ON PR.ID = PRD.PROJECTRISKID
	INNER JOIN APPPROJECTSTAGEDETAILS PSD
	ON PSD.ID = PRD.PROJECTSTAGEDETAILID 
	INNER JOIN APPPROJECTSTAGES PS
	ON PS.ID = PSD.PROJECTSTAGEID
	INNER JOIN APPSTATICVARIABLEOPTIONS SVO
	ON SVO.ID = PRD.STATICVARIABLEOPTIONID
	INNER JOIN APPSTATICVARIABLES SV
	ON SV.ID = SVO.STATICVARIABLEID
	LEFT JOIN APPDINAMICVARIABLEDETAILS DV
	ON DV.DINAMICVARIABLEID = SVO.DINAMICVARIABLEID AND 
	   DV.PROVINCEID        = PR.PROVINCEID

	-- [SVO].[SITE] [0] [NONE]
	-- [SVO].[SITE] [1] [IMPACT]
	-- [SVO].[SITE] [2] [PROBABILITY]
	-- UPDATE ALL VALUES
	UPDATE PR SET 
	[IMPACTWEIGHT] = CONVERT(DECIMAL(27, 2), (SELECT 
		SUM(CASE WHEN SVO.[SITE] = 1 THEN SVO.[VALUE] ELSE 0 END)
		FROM APPPROJECTRISKDETAILS PRD
		INNER JOIN APPPROJECTSTAGEDETAILS PSD
		ON PSD.ID = PRD.PROJECTSTAGEDETAILID
		INNER JOIN APPPROJECTSTAGES PS
		ON PS.ID  = PSD.PROJECTSTAGEID
		INNER JOIN APPSTATICVARIABLEOPTIONS SVO
		ON SVO.ID = PRD.STATICVARIABLEOPTIONID
		WHERE PRD.PROJECTRISKID = PR.ID AND PS.ID = PR.STAGEID
		GROUP BY PRD.PROJECTRISKID)),
	[IMPACT] = CASE WHEN [IMPACTWEIGHT] = 0 THEN 0 ELSE CONVERT(DECIMAL(27, 2), (SELECT 
		SUM(CASE WHEN SVO.[SITE] = 1 THEN PRD.[VALUE] * SVO.[VALUE] ELSE 0 END) / [IMPACTWEIGHT]
		FROM APPPROJECTRISKDETAILS PRD
		INNER JOIN APPPROJECTSTAGEDETAILS PSD
		ON PSD.ID = PRD.PROJECTSTAGEDETAILID
		INNER JOIN APPPROJECTSTAGES PS
		ON PS.ID  = PSD.PROJECTSTAGEID
		INNER JOIN APPSTATICVARIABLEOPTIONS SVO
		ON SVO.ID = PRD.STATICVARIABLEOPTIONID
		WHERE PRD.PROJECTRISKID = PR.ID AND PS.ID = PR.STAGEID
		GROUP BY PRD.PROJECTRISKID) * [FIXIMPACTRATE]) END,
	[PROBABILITYWEIGHT] = CONVERT(DECIMAL(27, 2), (SELECT 
		SUM(CASE WHEN SVO.[SITE] = 2 THEN SVO.[VALUE] ELSE 0 END)
		FROM APPPROJECTRISKDETAILS PRD
		INNER JOIN APPPROJECTSTAGEDETAILS PSD
		ON PSD.ID = PRD.PROJECTSTAGEDETAILID
		INNER JOIN APPPROJECTSTAGES PS
		ON PS.ID  = PSD.PROJECTSTAGEID
		INNER JOIN APPSTATICVARIABLEOPTIONS SVO
		ON SVO.ID = PRD.STATICVARIABLEOPTIONID
		WHERE PRD.PROJECTRISKID = PR.ID AND PS.ID = PR.STAGEID
		GROUP BY PRD.PROJECTRISKID)),
	[PROBABILITY] = CASE WHEN [PROBABILITYWEIGHT] = 0 THEN 0 ELSE CONVERT(DECIMAL(27, 2), (SELECT 
		SUM(CASE WHEN SVO.[SITE] = 2 THEN PRD.[VALUE] * SVO.[VALUE] ELSE 0 END) / [PROBABILITYWEIGHT]
		FROM APPPROJECTRISKDETAILS PRD
		INNER JOIN APPPROJECTSTAGEDETAILS PSD
		ON PSD.ID = PRD.PROJECTSTAGEDETAILID
		INNER JOIN APPPROJECTSTAGES PS
		ON PS.ID  = PSD.PROJECTSTAGEID
		INNER JOIN APPSTATICVARIABLEOPTIONS SVO
		ON SVO.ID = PRD.STATICVARIABLEOPTIONID
		WHERE PRD.PROJECTRISKID = PR.ID AND PS.ID = PR.STAGEID
		GROUP BY PRD.PROJECTRISKID) * [FIXPROBABILITYRATE]) END,
	[VALUE] = CONVERT(DECIMAL(27, 2), [IMPACT] * [PROBABILITY])
	FROM APPPROJECTRISKS PR
	WHERE PR.[ISDELETED] = 0
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_code]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_code]
@SocialConflictId INT
AS
BEGIN
	DECLARE @DATE DATETIME = GETDATE(), @YEAR INT

	SET @YEAR = YEAR(GETDATE())

	UPDATE A
	SET [A].[Year]  = @YEAR,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM AppSocialConflicts WHERE [Year] = @YEAR)
	FROM AppSocialConflicts A
	WHERE [Id] = @SocialConflictId AND 
	      [Generation] = 0

	UPDATE A
	SET [A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + ' - ' + CONVERT(VARCHAR(4), [A].[Year])
	FROM AppSocialConflicts A
	WHERE [Id] = @SocialConflictId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_alert_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_alert_code]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_alert_code]
@SocialConflictAlertId INT
AS
BEGIN
	DECLARE @Date DATETIME = GETDATE(), @Year INT

	SET @Year = YEAR(GETDATE())

	UPDATE A
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM AppSocialConflictAlerts WHERE [Year] = @Year)
	FROM AppSocialConflictAlerts A
	WHERE [Id] = @SocialConflictAlertId AND 
	      [Generation] = 0

	UPDATE A
	SET [A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + ' - ' + CONVERT(VARCHAR(4), [A].[Year])
	FROM AppSocialConflictAlerts A
	WHERE [Id] = @SocialConflictAlertId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_alert_state]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_alert_state]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_alert_state]
@SocialConflictAlertId INT
AS
BEGIN
	UPDATE [A] SET 
	[A].[LastAlertRiskId] = (SELECT TOP 1 
						   [AR].[Id]
						   FROM [AppSocialConflictAlertRisks] [AR]
						   INNER JOIN [AppAlertRisks] [R]
						   ON [AR].[AlertRiskId] = [R].[Id]
						   WHERE [AR].[SocialConflictAlertId] = [A].[Id] AND
							     [R].[IsDeleted] = 0 AND
						         [AR].[IsDeleted] = 0
						   ORDER BY [AR].[RiskTime] DESC, [AR].[CreationTime] DESC),
	[A].[LastSealId] = (SELECT TOP 1 
	                  [AS].[Id]
					  FROM [AppSocialConflictAlertSeals] [AS] 
					  INNER JOIN [AppAlertSeals] [S]
					  ON [S].[Id] = [AS].[AlertSealId]
					  WHERE [SocialConflictAlertId] = [A].Id AND
					        [AS].[IsDeleted] = 0 AND
							[S].[IsDeleted] = 0
					  ORDER BY [AS].[SealTime] DESC, [AS].[CreationTime] DESC),
	[A].[LastSectorId] = (SELECT TOP 1 
	                  [AS].[Id]
					  FROM [AppSocialConflictAlertSectors] [AS] 
					  INNER JOIN [AppAlertSectors] [S]
					  ON [S].[Id] = [AS].[AlertSectorId]
					  WHERE [SocialConflictAlertId] = [A].Id AND
					        [AS].[IsDeleted] = 0 AND
							[S].[IsDeleted] = 0
					  ORDER BY [AS].[SectorTime] DESC, [AS].[CreationTime] DESC),
	[A].[LastStateId] = (SELECT TOP 1 
	                  [AS].[Id]
					  FROM [AppSocialConflictAlertStates] [AS] 
					  WHERE [SocialConflictAlertId] = [A].Id AND
					        [AS].[IsDeleted] = 0 
					  ORDER BY [AS].[StateTime] DESC, [AS].[CreationTime] DESC)
	FROM [AppSocialConflictAlerts] [A]
	WHERE [Id] = @SocialConflictAlertId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_state]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_state]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_state]
@SocialConflictId INT
AS
BEGIN
	UPDATE [SC] SET 
	[SC].[LastCondition] = ISNULL((SELECT TOP 1 [Type]
						   FROM [AppSocialConflictConditions] 
						   WHERE [SocialConflictId] = [SC].[Id] AND
						         [IsDeleted] = 0
						   ORDER BY [ConditionTime] DESC, CreationTime DESC), 0),
	[SC].[LastSocialConflictConditionId] = ISNULL((SELECT TOP 1 [Id]
						   FROM [AppSocialConflictConditions] 
						   WHERE [SocialConflictId] = [SC].[Id] AND
						         [IsDeleted] = 0
						   ORDER BY [ConditionTime] DESC, CreationTime DESC), 0),
	[SC].[LastSocialConflictRiskId] = (SELECT TOP 1 [CR].[Id]
						   FROM [AppSocialConflictRisks] [CR]
						   INNER JOIN [AppRisks] [AR]
						   ON [AR].[Id] = [CR].[RiskId]
						   WHERE [CR].[SocialConflictId] = [SC].[Id] AND
						         [CR].[IsDeleted] = 0 AND
								 [AR].[IsDeleted] = 0
						   ORDER BY [CR].[RiskTime] DESC, [CR].[CreationTime] DESC),
	[SC].[LastSocialConflictStateId] = (SELECT TOP 1 [CR].[Id]
						   FROM [AppSocialConflictStates] [CR]
						   WHERE [CR].[SocialConflictId] = [SC].[Id] AND
						         [CR].[IsDeleted] = 0
						   ORDER BY [CR].[StateTime] DESC, [CR].[CreationTime] DESC),
	[SC].[LastSocialConflictManagementId] = (SELECT TOP 1 [MA].[Id]
						   FROM [AppSocialConflictManagements] [MA]
						   WHERE [MA].[SocialConflictId] = [SC].[Id] AND
						         [MA].[IsDeleted] = 0
						   ORDER BY [MA].[ManagementTime] DESC, [MA].[CreationTime] DESC)	
	FROM [AppSocialConflicts] [SC]
	WHERE [SC].[Id] = @SocialConflictId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_sensible_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_sensible_code]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_sensible_code]
@SocialConflictSensibleId INT
AS
BEGIN
	DECLARE @DATE DATETIME = GETDATE(), @YEAR INT

	SET @YEAR = YEAR(GETDATE())

	UPDATE A
	SET [A].[Year]  = @YEAR,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM AppSocialConflictSensibles WHERE [Year] = @YEAR)
	FROM AppSocialConflictSensibles A
	WHERE [Id] = @SocialConflictSensibleId AND 
	      [Generation] = 0

	UPDATE A
	SET [A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + ' - ' + CONVERT(VARCHAR(4), [A].[Year])
	FROM AppSocialConflictSensibles A
	WHERE [Id] = @SocialConflictSensibleId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_sensible_state]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_sensible_state]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_sensible_state]
@SocialConflictSensibleId INT
AS
BEGIN
	UPDATE [A] SET 
	[A].LastCondition = ISNULL((SELECT TOP 1 [Type]
						   FROM AppSocialConflictSensibleConditions 
						   WHERE SocialConflictSensibleId = [A].Id AND
						         IsDeleted = 0
						   ORDER BY ConditionTime DESC, CreationTime DESC), 0),
	[A].[LastSocialConflictSensibleRiskId] = (SELECT TOP 1 [CR].[Id]
						   FROM [AppSocialConflictSensibleRisks] [CR]
						   INNER JOIN [AppRisks] [AR]
						   ON [AR].[Id] = [CR].[RiskId]
						   WHERE [CR].[SocialConflictSensibleId] = [A].[Id] AND
						         [CR].[IsDeleted] = 0 AND
								 [AR].[IsDeleted] = 0
						   ORDER BY [CR].[RiskTime] DESC, [CR].[CreationTime] DESC),
	[A].[LastSocialConflictSensibleManagementId] = (SELECT TOP 1 [CM].[Id]
						   FROM [AppSocialConflictSensibleManagements] [CM]
						   INNER JOIN [AppManagements] [AM]
						   ON [AM].[Id] = [CM].[ManagementId]
						   WHERE [CM].[SocialConflictSensibleId] = [A].[Id] AND
						         [CM].[IsDeleted] = 0 AND
								 [AM].[IsDeleted] = 0
						   ORDER BY [CM].[ManagementTime] DESC, [CM].[CreationTime] DESC),
	[A].[LastSocialConflictSensibleStateId] = (SELECT TOP 1 [CS].[Id]
						   FROM [AppSocialConflictSensibleStates] [CS]
						   WHERE [CS].[SocialConflictSensibleId] = [A].[Id] AND
						         [CS].[IsDeleted] = 0
						   ORDER BY [CS].[StateTime] DESC, [CS].[CreationTime] DESC),
	[A].[LastSocialConflictSensibleConditionId] = (SELECT TOP 1 [CSC].[Id]
						   FROM [AppSocialConflictSensibleConditions] [CSC]
						   WHERE [CSC].[SocialConflictSensibleId] = [A].[Id] AND
						         [CSC].[IsDeleted] = 0
						   ORDER BY [CSC].[ConditionTime] DESC, [CSC].[CreationTime] DESC)
	FROM [AppSocialConflictSensibles] [A]
	WHERE [Id] = @SocialConflictSensibleId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict_alert]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict_alert]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict_alert]
@AlertId INT, @Command VARCHAR(1)
AS
BEGIN
	-- CABECERA
	IF @Command = 'C'
	BEGIN
		SELECT 
		[A].[Id],
		[A].[Code],
		CONVERT(VARCHAR(10), [A].[AlertTime], 103) AS [AlertTime],
		ISNULL([A].[Description], '') AS [Description],
		ISNULL([A].[Information], '') AS [Information],
		ISNULL([A].[Actions], '') AS [Actions],
		ISNULL([A].[Recommendations], '') AS [Recommendations],
		ISNULL([A].[AditionalInformation], '') AS [AditionalInformation],
		ISNULL([A].[Source], '') AS [Source],
		ISNULL([A].[SourceType], '') AS [SourceType],
		ISNULL([A].[Link], '') AS [Link],
		CASE WHEN [A].[SocialConflictId] IS NOT NULL AND [C].[IsDeleted] = 0 
			THEN CONCAT(ISNULL([C].[Code], ''), ' - ', ISNULL([C].[CaseName], ''))
			ELSE '' END AS [SocialConflict],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM AppSocialConflictAlertLocations [L] 
		INNER JOIN AppTerritorialUnits [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictAlertId] = [A].[Id] AND
			  [L].[IsDeleted] = 0 AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		CASE WHEN [A].[TypologyId]    IS NOT NULL AND [TY].[IsDeleted] = 0 THEN [TY].[Name] ELSE '' END AS [Typology],
		CASE WHEN [A].[SubTypologyId] IS NOT NULL AND [ST].[IsDeleted] = 0 THEN [ST].[Name] ELSE '' END AS [SubTypology],
		CASE WHEN [A].[CoordinatorId] IS NOT NULL AND [CO].[IsDeleted] = 0 THEN [CO].[Name] ELSE '' END AS [Coordinator],
		CASE WHEN [A].[AnalystId]     IS NOT NULL AND [AN].[IsDeleted] = 0 THEN [AN].[Name] ELSE '' END AS [Analyst],
		CASE WHEN [A].[ManagerId]     IS NOT NULL AND [MA].[IsDeleted] = 0 THEN [MA].[Name] ELSE '' END AS [Manager],
		CASE WHEN [A].[AlertResponsibleId] IS NOT NULL AND [AR].[IsDeleted] = 0 THEN [AR].[Name] ELSE '' END AS [Responsible],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0 
			THEN [ARI].[Description] ELSE '' END AS [RiskDescription],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0  
			THEN [RI].[Name] ELSE '' END AS [RiskName],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0  
			THEN [RI].[Color] ELSE '' END AS [RiskColor]
		FROM AppSocialConflictAlerts [A]
		LEFT JOIN AppSocialConflicts [C]
		ON [C].[Id] = [A].[SocialConflictId]
		LEFT JOIN AppTypologies [TY]
		ON [TY].[Id] = [A].[TypologyId]
		LEFT JOIN AppPersons [CO]
		ON [CO].[Id] = [A].[CoordinatorId]
		LEFT JOIN AppSubTypologies [ST]
		ON [ST].[Id] = [A].[SubTypologyId]
		LEFT JOIN AppPersons [AN]
		ON [AN].[Id] = [A].[AnalystId]
		LEFT JOIN AppPersons [MA]
		ON [MA].[Id] = [A].[ManagerId]
		LEFT JOIN AppAlertResponsibles [AR]
		ON [AR].[Id] = [A].[AlertResponsibleId]
		LEFT JOIN AppSocialConflictAlertRisks [ARI]
		ON [ARI].[Id] = [A].[LastAlertRiskId]
		LEFT JOIN AppAlertRisks [RI]
		ON [RI].[Id]  = [ARI].[AlertRiskId]
		WHERE [A].[Id]        = @AlertId AND
		      [A].[IsDeleted] = 0
	END
	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictAlertLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [L].[IsDeleted]             = 0 AND
			  [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [L].[SocialConflictAlertId] = @AlertId 
	END
	-- ACTORS
	IF @Command = 'A'
	BEGIN
		SELECT 
		[AC].[Name],
		ISNULL([AC].[Job], '') AS [Job],
		ISNULL([AC].[Community], '') AS [Community],
		CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
			THEN [AT].[Name] ELSE '' END [Type],
		CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
				  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
				  [AT].[ShowMovement] = 1
			THEN [AM].[Name] ELSE '' END [Movement],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
		FROM [AppSocialConflictActors] [AC]
		INNER JOIN [AppSocialConflictAlerts] [A]
		ON [A].[Id] = [AC].[SocialConflictAlertId] 
		LEFT JOIN [AppActorTypes] [AT]
		ON [AT].[Id] = [AC].[ActorTypeId] 
		LEFT JOIN [AppActorMovements] [AM]
		ON [AM].[Id] = [AC].[ActorMovementId] 
		WHERE [AC].[IsDeleted] = 0 AND
			  [A].[IsDeleted] = 0 AND
			  [A].[Id]        = @AlertId
	END
	-- STATES
	IF @Command = 'E'
	BEGIN
		SELECT 
		[S].[Description],
		CONCAT(CONVERT(VARCHAR(10), [S].[StateTime], 103), ' ', CONVERT(VARCHAR(5), [S].[StateTime], 8), ' ', 'horas') AS [StateTime]
		FROM [AppSocialConflictAlertStates] [S]
		INNER JOIN [AppSocialConflictAlerts] [A]
		ON [A].[Id] = [S].[SocialConflictAlertId]
		WHERE [A].[IsDeleted] = 0 AND
		      [S].[IsDeleted] = 0 AND
              [A].[Id]        = @AlertId
		ORDER BY [S].[StateTime] DESC
	END
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[function_string_to_table]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
	DROP FUNCTION [dbo].[function_string_to_table]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE FUNCTION [dbo].[function_string_to_table]
(
    @String VARCHAR(MAX),
    @Delimiter CHAR(1)
)
RETURNS @Output TABLE(
    [Value] VARCHAR(256)
)
BEGIN

    DECLARE @Start INT, @End INT, @Value VARCHAR(256)
    SELECT @Start = 1, @End = CHARINDEX(@Delimiter, @String)

    WHILE @Start < LEN(@String) + 1 BEGIN
        IF @End = 0 
		BEGIN
            SET @End = LEN(@String) + 1
		END

		SET @Value = LTRIM(RTRIM(SUBSTRING(@String, @Start, @End - @Start)))

		IF @Value <> ''
		BEGIN
			INSERT INTO @Output ([Value]) 
			VALUES(@Value)
		END

		SET @Start = @End + 1
		SET @End = CHARINDEX(@Delimiter, @String, @Start)
    END

    RETURN
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_task_management_list]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_task_management_list]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_task_management_list]
@Name VARCHAR(255) = '', @Code VARCHAR(255) = '', @StartDate DATETIME = NULL, @EndDate DATETIME = NULL, @Site INT = 0, @SkipCount INT, @MaxResultCount INT
AS
BEGIN
	DECLARE @TableResult TABLE(
		[Index] INT,
		[Id] INT,
		[CreationTime] DATETIME,
		[Code] VARCHAR(32),
		[Name] VARCHAR(1000),
		[Tasks] INT,
		[Type] INT) 
	DECLARE @TableName TABLE([Value] VARCHAR(256)) 
	DECLARE @TableCode TABLE([Value] VARCHAR(256)) 
	DECLARE @CountName INT
	DECLARE @CountCode INT

	INSERT INTO @TableName ([Value])
	SELECT [Value] FROM [function_string_to_table](@Name, ' ')
	INSERT INTO @TableCode ([Value])
	SELECT [Value] FROM [function_string_to_table](@Code, ' ')

	SET @StartDate = CASE WHEN @StartDate IS NOT NULL THEN dateadd(DD, datediff(DD, 0, @StartDate), 0) ELSE NULL END
	SET @EndDate   = CASE WHEN @EndDate   IS NOT NULL THEN dateadd(DD, datediff(DD, 0, @EndDate  ), 0) ELSE NULL END
	SET @MaxResultCount = @SkipCount + @MaxResultCount
	SELECT @CountName = COUNT(*) FROM @TableName
	SELECT @CountCode = COUNT(*) FROM @TableCode

	INSERT INTO @TableResult(
	[Index], [Id], [CreationTime], [Code], [Name], [Tasks], [Type])
	SELECT ROW_NUMBER() OVER (ORDER BY Id) AS [Index], [Id], [CreationTime], [Code], [Name], [Tasks], [Type] FROM (
	SELECT [Id], [CreationTime], [Code], [Name], [Tasks], [Type] FROM (
	SELECT 
		[Id], 
		[CreationTime], 
		[Code], 
		[CaseName] AS [Name], 
		(SELECT COUNT(*) FROM AppSocialConflictTaskManagements WHERE [SocialConflictId] = SC.Id AND [Status] <> 2) AS [Tasks],
		1 AS [Type] 
	FROM AppSocialConflicts SC
	WHERE [SC].[IsDeleted] = 0
	UNION ALL
	SELECT 
		[Id], 
		[CreationTime], 
		[Code], 
		[Description] AS [Name],
		(SELECT COUNT(*) FROM AppSocialConflictTaskManagements WHERE [SocialConflictAlertId] = SCA.Id AND [Status] <> 2) AS [Tasks],
		2 AS [Type]
	FROM AppSocialConflictAlerts SCA
	WHERE [SCA].[IsDeleted] = 0
	UNION ALL
	SELECT 
		[Id], 
		[CreationTime], 
		[Code], 
		[CaseName] AS [Name], 
		(SELECT COUNT(*) FROM AppSocialConflictTaskManagements WHERE [SocialConflictSensibleId] = SCS.Id AND [Status] <> 2) AS [Tasks],
		3 AS [Type] 
	FROM AppSocialConflictSensibles SCS
	WHERE [SCS].[IsDeleted] = 0) AS [Result]) AS [TableData]
	WHERE (@CountName = 0 OR (SELECT COUNT(*) FROM @TableName WHERE [Name] LIKE '%' + [Value] + '%') = @CountName) AND
		  (@CountCode = 0 OR (SELECT COUNT(*) FROM @TableCode WHERE [Code] LIKE '%' + [Value] + '%') = @CountCode) AND
		  (@Site = 0 OR [Type] = @Site) AND
		  ((@StartDate IS NULL OR @EndDate IS NULL) OR [CreationTime] BETWEEN @StartDate AND @EndDate) 
	ORDER BY [Id]

	DECLARE @RecordCount INT
	SELECT @RecordCount = COUNT(*) FROM @TableResult

	SELECT *, @RecordCount AS [Count] FROM @TableResult
	WHERE [Index] > @SkipCount AND [Index] <= @MaxResultCount
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_code_replace]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_code_replace]
@SocialConflictId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE A
	SET [A].[Year]  = @YEAR,
		[A].[Generation] = 1,
		[A].[Count] = @Count,
		[A].[Code] =  CASE WHEN @Count < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM AppSocialConflicts A
	WHERE [Id] = @SocialConflictId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_sensible_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_sensible_code_replace]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_sensible_code_replace]
@SocialConflictSensibleId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE A
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = @Count,
		[A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM AppSocialConflictSensibles A
	WHERE [Id] = @SocialConflictSensibleId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_help_memory_list]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_help_memory_list]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_help_memory_list]
@Code VARCHAR(500) = NULL, @Name VARCHAR(500) = NULL, @Site INT = 0, @LastCondition INT = 0, @Deparment INT = -1, @Province INT = -1, @District INT = -1, @MaxResultCount INT= 10, @SkipCount INT = 0
AS
BEGIN
	DECLARE @TableResult TABLE(
		[Index] INT,
		[Id] INT,
		[Code] VARCHAR(32),
		[Name] VARCHAR(1000),
		[TerritorialUnits] VARCHAR(1000),
		[Type] INT,
		[LastCondition] INT) 
	DECLARE @TableName TABLE([Value] VARCHAR(256)) 
	DECLARE @TableCode TABLE([Value] VARCHAR(256)) 
	DECLARE @CountName INT
	DECLARE @CountCode INT

	INSERT INTO @TableName ([Value])
	SELECT [Value] FROM [function_string_to_table](@Name, ' ')
	INSERT INTO @TableCode ([Value])
	SELECT [Value] FROM [function_string_to_table](@Code, ' ')

	SET @MaxResultCount = @SkipCount + @MaxResultCount
	SELECT @CountName = COUNT(*) FROM @TableName
	SELECT @CountCode = COUNT(*) FROM @TableCode

	IF @Site = 0
	BEGIN
		INSERT INTO @TableResult([Index], [Id], [Code], [Name], [TerritorialUnits], [Type], [LastCondition])
		SELECT ROW_NUMBER() OVER (ORDER BY [R].[Id]) AS [Index], [R].[Id], [R].[Code], [R].[CaseName], [R].[TerritorialUnits], [R].[Type], [R].[LastCondition] FROM
			(SELECT 
			[C].[Id], 
			[C].[Code], 
			[C].[CaseName],
			ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name]))
			FROM [AppSocialConflictLocations] [L] 
			INNER JOIN [AppTerritorialUnits] [T]
			ON [T].[Id] = [L].[TerritorialUnitId]
			WHERE [L].[SocialConflictId] = [C].[Id] AND
				  [T].[IsDeleted] = 0
			GROUP BY [T].[Name]
			FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
			1 AS [Type],
			[C].[LastCondition]
			FROM [AppSocialConflicts] [C]
			WHERE (@CountName = 0 OR (SELECT COUNT(*) FROM @TableName WHERE [C].[CaseName] LIKE '%' + [Value] + '%') = @CountName) AND 
				  (@CountCode = 0 OR (SELECT COUNT(*) FROM @TableCode WHERE [C].[Code] LIKE '%' + [Value] + '%') = @CountCode) AND 
				  (@LastCondition = 0 OR [C].[LastCondition] = @LastCondition) AND
				  ((@Deparment = -1) OR 
				   (SELECT COUNT(*) FROM [AppSocialConflictLocations] [L] 
					WHERE [L].[DepartmentId] = @Deparment AND 
						  (@Province = -1 OR [L].[ProvinceId] = @Province) AND
						  (@District = -1 OR [L].[DistrictId] = @District) AND
						  [L].[SocialConflictId] = [C].[Id]) > 0)
			UNION ALL
			SELECT 
			[S].[Id], 
			[S].[Code], 
			[S].[CaseName], 
			ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name]))
			FROM [AppSocialConflictSensibleLocations] [L] 
			INNER JOIN [AppTerritorialUnits] [T]
			ON [T].[Id] = [L].[TerritorialUnitId]
			WHERE [L].[SocialConflictSensibleId] = [S].[Id] AND
				  [T].[IsDeleted] = 0
			GROUP BY [T].[Name]
			FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
			3 AS [Type],
			[S].[LastCondition]
			FROM [AppSocialConflictSensibles] [S]
			WHERE (@CountName = 0 OR (SELECT COUNT(*) FROM @TableName WHERE [S].[CaseName] LIKE '%' + [Value] + '%') = @CountName) AND 
				  (@CountCode = 0 OR (SELECT COUNT(*) FROM @TableCode WHERE [S].[Code] LIKE '%' + [Value] + '%') = @CountCode) AND
				  (@LastCondition = 0 OR [S].[LastCondition] = @LastCondition) AND
				  ((@Deparment = -1) OR 
				   (SELECT COUNT(*) FROM [AppSocialConflictSensibleLocations] [L] 
					WHERE [L].[DepartmentId] = @Deparment AND 
						  (@Province = -1 OR [L].[ProvinceId] = @Province) AND
						  (@District = -1 OR [L].[DistrictId] = @District) AND
						  [L].[SocialConflictSensibleId] = [S].[Id]) > 0)) AS [R]
		ORDER BY [R].[Code]
	END

	IF @Site = 1
	BEGIN
		INSERT INTO @TableResult([Index], [Id], [Code], [Name], [TerritorialUnits], [Type], [LastCondition])
		SELECT 
		ROW_NUMBER() OVER (ORDER BY [C].[Id]) AS [Index], 
		[C].[Id], 
		[C].[Code], 
		[C].[CaseName],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictId] = [C].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		1 AS [Type],
		[C].[LastCondition]
		FROM [AppSocialConflicts] [C]
		WHERE (@CountName = 0 OR (SELECT COUNT(*) FROM @TableName WHERE [C].[CaseName] LIKE '%' + [Value] + '%') = @CountName) AND 
			  (@CountCode = 0 OR (SELECT COUNT(*) FROM @TableCode WHERE [C].[Code] LIKE '%' + [Value] + '%') = @CountCode) AND 
			  (@LastCondition = 0 OR [C].[LastCondition] = @LastCondition) AND
			  ((@Deparment = -1) OR 
			   (SELECT COUNT(*) FROM [AppSocialConflictLocations] [L] 
				WHERE [L].[DepartmentId] = @Deparment AND 
					  (@Province = -1 OR [L].[ProvinceId] = @Province) AND
					  (@District = -1 OR [L].[DistrictId] = @District) AND
					  [L].[SocialConflictId] = [C].[Id]) > 0)
		ORDER BY [C].[Code]
	END

	IF @Site = 3
	BEGIN
		INSERT INTO @TableResult([Index], [Id], [Code], [Name], [TerritorialUnits], [Type], [LastCondition])
		SELECT 
		ROW_NUMBER() OVER (ORDER BY [S].[Id]) AS [Index], 
		[S].[Id], 
		[S].[Code], 
		[S].[CaseName],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictSensibleLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictSensibleId] = [S].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		3 AS [Type],
		[S].[LastCondition]
		FROM [AppSocialConflictSensibles] [S]
		WHERE (@CountName = 0 OR (SELECT COUNT(*) FROM @TableName WHERE [S].[CaseName] LIKE '%' + [Value] + '%') = @CountName) AND 
			  (@CountCode = 0 OR (SELECT COUNT(*) FROM @TableCode WHERE [S].[Code] LIKE '%' + [Value] + '%') = @CountCode) AND
			  (@LastCondition = 0 OR [S].[LastCondition] = @LastCondition) AND
			  ((@Deparment = -1) OR 
			   (SELECT COUNT(*) FROM [AppSocialConflictSensibleLocations] [L] 
				WHERE [L].[DepartmentId] = @Deparment AND 
					  (@Province = -1 OR [L].[ProvinceId] = @Province) AND
					  (@District = -1 OR [L].[DistrictId] = @District) AND
					  [L].[SocialConflictSensibleId] = [S].[Id]) > 0)
		ORDER BY [S].[Code]
	END

	DECLARE @RecordCount INT
	SELECT @RecordCount = COUNT(*) FROM @TableResult

	SELECT [Id], [Code], [Name], [TerritorialUnits], [Type], [LastCondition], @RecordCount AS [Count] FROM @TableResult
	WHERE [Index] > @SkipCount AND [Index] <= @MaxResultCount

END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[help_memory_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[help_memory_code]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[help_memory_code]
@HelpMemoryId INT
AS
BEGIN
	DECLARE @Date DATETIME = GETDATE(), @Year INT

	SET @Year = YEAR(GETDATE())

	UPDATE A
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM [AppHelpMemories] WHERE [Year] = @Year)
	FROM [AppHelpMemories] A
	WHERE [Id] = @HelpMemoryId AND 
	      [Generation] = 0

	UPDATE A
	SET [A].[Code] =  'AM-' + CASE WHEN [A].[Count] < 100 AND [A].[Count] >= 10 THEN '0' WHEN [A].[Count] < 10 THEN '00' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + '-SGSD-' + CONVERT(VARCHAR(4), [A].[Year])
	FROM [AppHelpMemories] A
	WHERE [Id] = @HelpMemoryId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict_help_memory]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict_help_memory]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict_help_memory]
@SocialConflictId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS 
BEGIN

	--HEADER
	IF @Command = 'C'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		CONCAT(CONVERT(VARCHAR, CASE WHEN DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])) < 10 THEN '0' ELSE '' END),
		CONVERT(VARCHAR, DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))),
		' de ', 
		LOWER(DATENAME(MONTH, ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))), 
		' de ',
		CONVERT(VARCHAR, YEAR(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])))) AS [LastModificationTime],
		[SC].[Code],
		UPPER([SC].[CaseName]) AS [CaseName],
		ISNULL([SC].[Problem], '') AS [Problem],
		ISNULL([SC].[Plaint], '') AS [Plaint],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictId] = [SC].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0 
			THEN ISNULL([SCR].[Description], '') ELSE '' END AS [RiskDescription],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Name], '') ELSE 'Ninguno' END AS [RiskName],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Color], '') ELSE '#787878' END AS [RiskColor],
		[SC].[LastCondition] AS [ConditionType],
		CASE WHEN [SC].[LastCondition] = 1 THEN 'Activo'
			 WHEN [SC].[LastCondition] = 2 THEN 'Inactivo'
			 ELSE 'Ninguno' END [ConditionName],
		CASE WHEN [SC].[LastCondition] = 1 THEN '#00B050'
			 WHEN [SC].[LastCondition] = 2 THEN '#FF0000'
			 ELSE '#787878' END [ConditionColor],
		ISNULL([STS].[Opened], 0) AS [Opened],
		ISNULL([STS].[Closed], 0) AS [Closed],
		ISNULL([STS].[Pip], 0) AS [Pip],
		ISNULL([STS].[Activities], 0) AS [Activities],
		ISNULL([STS].[ResponsibleCount], 0) AS [ResponsibleCount],
		(SELECT ISNULL(UserName, '') FROM [AbpUsers] WHERE [Id] = @CreatorUserId) AS [UserName]
		FROM [AppSocialConflicts] [SC]
		LEFT JOIN [AppSocialConflictRisks] [SCR]
		ON [SCR].[Id] = [SC].[LastSocialConflictRiskId]
		LEFT JOIN [AppRisks] [SCRI]
		ON [SCRI].[Id] = [SCR].[RiskId]
		LEFT JOIN (SELECT 
			@SocialConflictId AS [Id],
			SUM(CASE WHEN [P].[Value] LIKE '%Abierto%' THEN 1 ELSE 0 END) AS [Opened],
			SUM(CASE WHEN [P].[Value] LIKE '%Cerrado%' THEN 1 ELSE 0 END) AS [Closed],
			SUM(CASE WHEN [C].[Type] = 1 THEN 1 ELSE 0 END) AS [Pip],
			SUM(CASE WHEN [C].[Type] IN (0, 2) THEN 1 ELSE 0 END) AS [Activities],
			COUNT(*) AS [ResponsibleCount]
			FROM [AppSocialConflicts] [S]
			INNER JOIN [AppRecords] [R]
			ON [R].[SocialConflictId] = [S].[Id]
			INNER JOIN [AppCompromises] [C]
			ON [C].[RecordId] = [R].[Id]
			INNER JOIN [AppParameter] [P]
			ON [P].[Id] = [C].[StatusId]
			WHERE [S].[Id] = @SocialConflictId AND
				  [S].[IsDeleted] = 0 AND
				  [R].[IsDeleted] = 0 AND
				  [C].[IsDeleted] = 0
			GROUP BY [S].[Id]) AS [STS]
		ON [STS].[Id] = [SC].[Id]
		WHERE [SC].[Id] = @SocialConflictId
	END

	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [L].[SocialConflictId] = @SocialConflictId
	END

	--FACTS
	IF @Command = 'F'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [GF].[FactTime] DESC) AS [Row],
		'El ' + CASE WHEN DAY([GF].[FactTime]) < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR, DAY([GF].[FactTime])) + 
		' de ' + LOWER(DATENAME(MONTH, [GF].[FactTime]))  +
		' de ' + CONVERT(VARCHAR, YEAR([GF].[FactTime])) AS [FormatDate],
		CONVERT(VARCHAR(10), [GF].[FactTime], 103) AS [FactTime],
		[GF].[Description] AS [Description]
		FROM [AppSocialConflictGeneralFacts] [GF]
		WHERE [GF].[IsDeleted] = 0 AND
			  [GF].[SocialConflictId] = @SocialConflictId
		ORDER BY [GF].[FactTime] DESC
	END

	-- ACTORS
	IF @Command = 'A'
	BEGIN
		SELECT 
		[AC].[Name],
		ISNULL([AC].[Job], '') AS [Job],
		ISNULL([AC].[Community], '') AS [Community],
		CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
			THEN [AT].[Name] ELSE '' END [Type],
		CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
				  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
				  [AT].[ShowMovement] = 1
			THEN [AM].[Name] ELSE '' END [Movement],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
		FROM [AppSocialConflictActors] [AC]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [AC].[SocialConflictId] 
		LEFT JOIN [AppActorTypes] [AT]
		ON [AT].[Id] = [AC].[ActorTypeId] 
		LEFT JOIN [AppActorMovements] [AM]
		ON [AM].[Id] = [AC].[ActorMovementId] 
		WHERE [AC].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [SC].[Id]        = @SocialConflictId
	END
	--MANAGEMENTS
	IF @Command = 'M'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCM].[ManagementTime] DESC) AS [Row],
		'El ' + CASE WHEN DAY([SCM].[ManagementTime]) < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR, DAY([SCM].[ManagementTime])) + 
		' de ' + LOWER(DATENAME(MONTH, [SCM].[ManagementTime]))  +
		' de ' + CONVERT(VARCHAR, YEAR([SCM].[ManagementTime])) AS [FormatDate],
		CONVERT(VARCHAR(10), [SCM].[ManagementTime], 103) AS [ManagementTime],
		[AM].[Name] AS [Management],
		[SCM].[Description] AS [Description]
		FROM [AppSocialConflictManagements] [SCM]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [SCM].[SocialConflictId]
		INNER JOIN [AppManagements] [AM]
		ON [AM].[Id] = [SCM].[ManagementId]
		WHERE [SCM].[IsDeleted] = 0 AND
			  [SC].[IsDeleted]  = 0 AND
			  [AM].[IsDeleted]  = 0 AND
			  [SC].[Id]         = @SocialConflictId
		ORDER BY [SCM].[ManagementTime] DESC
	END

	--STATES
	IF @Command = 'S'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCS].[Id] ASC) AS [Row],
		CONVERT(VARCHAR(10), [SCS].[StateTime], 103) AS [StateTime],
		ISNULL([SCS].[State], '') AS [State],
		ISNULL([SCS].[Description], '') AS [Description]
		FROM [AppSocialConflictStates] [SCS]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [SCS].[SocialConflictId]
		WHERE [SCS].[IsDeleted] = 0 AND
			  [SC].[IsDeleted]  = 0 AND
			  [SC].[Id]         = @SocialConflictId
		ORDER BY [StateTime] DESC
	END

	--SUGERENCES
	IF @Command = 'R'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCS].[Id] ASC) AS [Row],
		ISNULL([SCS].[Description], '') AS [Description]
		FROM [AppSocialConflictSugerences] [SCS]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [SCS].[SocialConflictId]
		WHERE [SCS].[IsDeleted] = 0 AND
				[SC].[IsDeleted]  = 0 AND
				[SC].[Id]         = @SocialConflictId
	END

	--COMPROMISES 
	IF @Command = 'E'
	BEGIN
		SELECT 
		SUM(CASE WHEN [P].[Value] LIKE '%Abierto%' THEN 1 ELSE 0 END) AS [Opened],
		SUM(CASE WHEN [P].[Value] LIKE '%Cerrado%' THEN 1 ELSE 0 END) AS [Closed],
		SUM(CASE WHEN [C].[Type] = 1 THEN 1 ELSE 0 END) AS [Pip],
		SUM(CASE WHEN [C].[Type] IN (0, 2) THEN 1 ELSE 0 END) AS [Activities],
		COUNT(*) AS [Count]
		FROM [AppSocialConflicts] [S]
		INNER JOIN [AppRecords] [R]
		ON [R].[SocialConflictId] = [S].[Id]
		INNER JOIN [AppCompromises] [C]
		ON [C].[RecordId] = [R].[Id]
		INNER JOIN [AppParameter] [P]
		ON [P].[Id] = [C].[StatusId]
		WHERE [S].[Id] = @SocialConflictId AND
			  [S].[IsDeleted] = 0 AND
			  [R].[IsDeleted] = 0 AND
			  [C].[IsDeleted] = 0
	END

	--RESPONSIBLES 
	IF @Command = 'Y'
	BEGIN
		SELECT 
			UPPER([RE].[Name]) AS [Name],
			COUNT(*) AS [Count]
		FROM [AppSocialConflicts] [SC]
		INNER JOIN [AppRecords] [RC]
		ON [RC].[SocialConflictId] = [SC].[Id]
		INNER JOIN [AppCompromises] [CP]
		ON [CP].[RecordId] = [RC].[Id]
		INNER JOIN [AppResponsibleActors] [RE]
		ON [RE].[Id] = [CP].[ResponsibleActorId]
		WHERE [SC].[Id] = @SocialConflictId AND
			  [SC].[IsDeleted] = 0 AND
			  [RC].[IsDeleted] = 0 AND
			  [CP].[IsDeleted] = 0 AND
			  [RE].[IsDeleted] = 0 AND
			  [RE].[IsDeleted] = 0
		GROUP BY [RE].[Id], [RE].[Name]
		ORDER BY 2
	END
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict_sensible_help_memory]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict_sensible_help_memory]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict_sensible_help_memory]
@SocialConflictSensibleId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS 
BEGIN

	--HEADER
	IF @Command = 'C'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		CONCAT(CONVERT(VARCHAR, CASE WHEN DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])) < 10 THEN '0' ELSE '' END),
		CONVERT(VARCHAR, DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))),
		' de ', 
		LOWER(DATENAME(MONTH, ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))), 
		' de ',
		CONVERT(VARCHAR, YEAR(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])))) AS [LastModificationTime],
		[SC].[Code],
		UPPER([SC].[CaseName]) AS [CaseName],
		ISNULL([SC].[Problem], '') AS [Problem],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name]))
		FROM [AppSocialConflictSensibleLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictSensibleId] = [SC].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		CASE WHEN [SC].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0 
			THEN ISNULL([SCR].[Description], '') ELSE '' END AS [RiskDescription],
		CASE WHEN [SC].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Name], '') ELSE 'Ninguno' END AS [RiskName],
		CASE WHEN [SC].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Color], '') ELSE '#787878' END AS [RiskColor],
		[SC].[LastCondition] AS [ConditionType],
		CASE WHEN [SC].[LastCondition] = 1 THEN 'Activo'
			 WHEN [SC].[LastCondition] = 2 THEN 'Inactivo'
			 ELSE 'Ninguno' END [ConditionName],
		CASE WHEN [SC].[LastCondition] = 1 THEN '#00B050'
			 WHEN [SC].[LastCondition] = 2 THEN '#FF0000'
			 ELSE '#787878' END [ConditionColor],
		(SELECT ISNULL(UserName, '') FROM [AbpUsers] WHERE [Id] = @CreatorUserId) AS [UserName]
		FROM [AppSocialConflictSensibles] [SC]
		LEFT JOIN [AppSocialConflictSensibleRisks] [SCR]
		ON [SCR].[Id] = [SC].[LastSocialConflictSensibleRiskId]
		LEFT JOIN [AppRisks] [SCRI]
		ON [SCRI].[Id] = [SCR].[RiskId]
		WHERE [SC].[Id] = @SocialConflictSensibleId
	END

	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictSensibleLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [L].[SocialConflictSensibleId] = @SocialConflictSensibleId
	END

	--FACTS
	IF @Command = 'F'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [GF].[FactTime] DESC) AS [Row],
		'El ' + CASE WHEN DAY([GF].[FactTime]) < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR, DAY([GF].[FactTime])) + 
		' de ' + LOWER(DATENAME(MONTH, [GF].[FactTime]))  +
		' de ' + CONVERT(VARCHAR, YEAR([GF].[FactTime])) AS [FormatDate],
		CONVERT(VARCHAR(10), [GF].[FactTime], 103) AS [FactTime],
		[GF].[Description] AS [Description]
		FROM [AppSocialConflictSensibleGeneralFacts] [GF]
		WHERE [GF].[IsDeleted] = 0 AND
			  [GF].[SocialConflictSensibleId] = @SocialConflictSensibleId
		ORDER BY [GF].[FactTime] DESC
	END

	-- ACTORS
	IF @Command = 'A'
	BEGIN
		SELECT 
		[AC].[Name],
		ISNULL([AC].[Job], '') AS [Job],
		ISNULL([AC].[Community], '') AS [Community],
		CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
			THEN [AT].[Name] ELSE '' END [Type],
		CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
				  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
				  [AT].[ShowMovement] = 1
			THEN [AM].[Name] ELSE '' END [Movement],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
		FROM [AppSocialConflictActors] [AC]
		INNER JOIN [AppSocialConflictSensibles] [SC]
		ON [SC].[Id] = [AC].[SocialConflictSensibleId] 
		LEFT JOIN [AppActorTypes] [AT]
		ON [AT].[Id] = [AC].[ActorTypeId] 
		LEFT JOIN [AppActorMovements] [AM]
		ON [AM].[Id] = [AC].[ActorMovementId] 
		WHERE [AC].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [SC].[Id]        = @SocialConflictSensibleId
	END
	--MANAGEMENTS
	IF @Command = 'M'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCM].[ManagementTime] DESC) AS [Row],
		'El ' + CASE WHEN DAY([SCM].[ManagementTime]) < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR, DAY([SCM].[ManagementTime])) + 
		' de ' + LOWER(DATENAME(MONTH, [SCM].[ManagementTime]))  +
		' de ' + CONVERT(VARCHAR, YEAR([SCM].[ManagementTime])) AS [FormatDate],
		CONVERT(VARCHAR(10), [SCM].[ManagementTime], 103) AS [ManagementTime],
		[AM].[Name] AS [Management],
		[SCM].[Description] AS [Description]
		FROM [AppSocialConflictSensibleManagements] [SCM]
		INNER JOIN [AppSocialConflictSensibles] [SC]
		ON [SC].[Id] = [SCM].[SocialConflictSensibleId]
		INNER JOIN [AppManagements] [AM]
		ON [AM].[Id] = [SCM].[ManagementId]
		WHERE [SCM].[IsDeleted] = 0 AND
			  [SC].[IsDeleted]  = 0 AND
			  [AM].[IsDeleted]  = 0 AND
			  [SC].[Id]         = @SocialConflictSensibleId
		ORDER BY [SCM].[ManagementTime] DESC
	END

	--STATES
	IF @Command = 'S'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCS].[Id] ASC) AS [Row],
		CONVERT(VARCHAR(10), [SCS].[StateTime], 103) AS [StateTime],
		ISNULL([SCS].[State], '') AS [State],
		ISNULL([SCS].[Description], '') AS [Description]
		FROM [AppSocialConflictSensibleStates] [SCS]
		INNER JOIN [AppSocialConflictSensibles] [SC]
		ON [SC].[Id] = [SCS].[SocialConflictSensibleId]
		WHERE [SCS].[IsDeleted] = 0 AND
			  [SC].[IsDeleted]  = 0 AND
			  [SC].[Id]         = @SocialConflictSensibleId
		ORDER BY [StateTime] DESC
	END

	--SUGERENCES
	IF @Command = 'R'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCS].[Id] ASC) AS [Row],
		ISNULL([SCS].[Description], '') AS [Description]
		FROM [AppSocialConflictSensibleSugerences] [SCS]
		INNER JOIN [AppSocialConflictSensibles] [SC]
		ON [SC].[Id] = [SCS].[SocialConflictSensibleId]
		WHERE [SCS].[IsDeleted] = 0 AND
				[SC].[IsDeleted]  = 0 AND
				[SC].[Id]         = @SocialConflictSensibleId
	END
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_task_management_persons]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_task_management_persons]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_task_management_persons]
@SocialConflictTaskManagementId INT
AS
BEGIN
	DECLARE @TerritorialUnits TABLE([TerritorialUnitId] INT)
	--CONFLICT: 1, ALERT: 2, SENSIBLE: 3
	DECLARE @TaskSite INT

	SELECT @TaskSite = [Site] FROM [AppSocialConflictTaskManagements] 
	WHERE [Id] = @SocialConflictTaskManagementId

	IF @TaskSite = 1
	BEGIN
		INSERT INTO @TerritorialUnits ([TerritorialUnitId])
		SELECT DISTINCT [TU].[Id] FROM [AppSocialConflictTaskManagements] [TM]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [TM].[SocialConflictId]
		INNER JOIN [AppSocialConflictLocations] [SL]
		ON [SL].[SocialConflictId] = [SC].[Id]
		INNER JOIN [AppTerritorialUnits] [TU]
		ON [TU].[Id] = [SL].[TerritorialUnitId]
		WHERE [TU].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [TM].[IsDeleted] = 0
	END

	IF @TaskSite = 2
	BEGIN
		INSERT INTO @TerritorialUnits ([TerritorialUnitId])
		SELECT DISTINCT [TU].[Id] FROM [AppSocialConflictTaskManagements] [TM]
		INNER JOIN [AppSocialConflictAlerts] [SC]
		ON [SC].[Id] = [TM].[SocialConflictAlertId]
		INNER JOIN [AppSocialConflictAlertLocations] [SL]
		ON [SL].[SocialConflictAlertId] = [SC].[Id]
		INNER JOIN [AppTerritorialUnits] [TU]
		ON [TU].[Id] = [SL].[TerritorialUnitId]
		WHERE [TU].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [TM].[IsDeleted] = 0 AND
			  [SL].[IsDeleted] = 0
	END

	IF @TaskSite = 2
	BEGIN
		INSERT INTO @TerritorialUnits ([TerritorialUnitId])
		SELECT DISTINCT [TU].[Id] FROM [AppSocialConflictTaskManagements] [TM]
		INNER JOIN [AppSocialConflictSensibles] [SC]
		ON [SC].[Id] = [TM].[SocialConflictSensibleId]
		INNER JOIN [AppSocialConflictSensibleLocations] [SL]
		ON [SL].[SocialConflictSensibleId] = [SC].[Id]
		INNER JOIN [AppTerritorialUnits] [TU]
		ON [TU].[Id] = [SL].[TerritorialUnitId]
		WHERE [TU].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [TM].[IsDeleted] = 0 	
	END

	SELECT DISTINCT [T].[Id], [T].[Name], [T].[EmailAddress], [T].[Type] FROM (
	SELECT [PE].[Id], [PE].[Name], [PE].[EmailAddress], [PE].[Type] FROM [AppSocialConflictTaskManagements] [TA]
	LEFT JOIN [AppSocialConflictTaskManagementPersons] [TP]
	ON [TP].[SocialConflictTaskManagementId] = [TA].[Id]
	LEFT JOIN [AppPersons] [PE]
	ON [PE].[Id] = [TP].[PersonId]
	WHERE [TA].[IsDeleted] = 0            AND
		  [PE].[IsDeleted] = 0            AND 
		  [PE].[EmailAddress] IS NOT NULL AND 
		  [TA].[Id] = @SocialConflictTaskManagementId  
	UNION ALL 
	SELECT [PE].[Id], [PE].[Name], [PE].[EmailAddress], [PE].[Type] FROM [AppPersons] [PE]
	INNER JOIN [AppTerritorialUnitCoordinators] [TC]
	ON [TC].[PersonId] = [PE].[Id]
	WHERE [TC].[TerritorialUnitId] IN (SELECT [TerritorialUnitId] FROM @TerritorialUnits) AND
		  [PE].[IsDeleted] = 0) T
	ORDER BY [T].[Id]

END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[task_management_persons]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[task_management_persons]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[task_management_persons]
@TaskManagementId BIGINT
AS
BEGIN
	DECLARE @TerritorialUnits TABLE([TerritorialUnitId] INT)

	INSERT INTO @TerritorialUnits ([TerritorialUnitId])
	SELECT DISTINCT [TE].[Id] FROM [AppTaskManagement] [TA]
	INNER JOIN [AppCompromises] [CO]
	ON [CO].[Id] = [TA].[CompromiseId]
	INNER JOIN [AppRecords] [RE]
	ON [RE].[Id] = [CO].[RecordId]
	INNER JOIN [AppSocialConflicts] [SC]
	ON [SC].[Id] = [RE].[SocialConflictId]
	INNER JOIN [AppSocialConflictLocations] [LO]
	ON [LO].[SocialConflictId] = [SC].[Id]
	INNER JOIN [AppTerritorialUnits] [TE]
	ON [TE].[Id] = [LO].[TerritorialUnitId]
	WHERE [TA].[Id] = @TaskManagementId AND
		  [TE].[IsDeleted] = 0          AND
		  [SC].[IsDeleted] = 0          AND
		  [RE].[IsDeleted] = 0          AND
		  [CO].[IsDeleted] = 0          AND
		  [TA].[IsDeleted] = 0

	SELECT DISTINCT [T].[Id], [T].[Name], [T].[EmailAddress], [T].[Type] FROM (
	SELECT [PE].[Id], [PE].[Name], [PE].[EmailAddress], [PE].[Type] FROM [AppTaskManagement] [TA]
	LEFT JOIN [AppTaskManagementPersons] [TP]
	ON [TP].[TaskManagementId] = [TA].[Id]
	LEFT JOIN [AppPersons] [PE]
	ON [PE].[Id] = [TP].[PersonId]
	WHERE [TA].[IsDeleted] = 0            AND
		  [PE].[IsDeleted] = 0            AND 
		  [PE].[EmailAddress] IS NOT NULL AND 
		  [TA].[Id] = @TaskManagementId  
	UNION ALL 
	SELECT [PE].[Id], [PE].[Name], [PE].[EmailAddress], [PE].[Type] FROM [AppPersons] [PE]
	INNER JOIN [AppTerritorialUnitCoordinators] [TC]
	ON [TC].[PersonId] = [PE].[Id]
	WHERE [TC].[TerritorialUnitId] IN (SELECT [TerritorialUnitId] FROM @TerritorialUnits) AND
		  [PE].[IsDeleted] = 0) T
	ORDER BY [T].[Id]
	
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_verification]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_verification]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_verification]
@SocialConflictId INT
AS
BEGIN
	UPDATE [SC] SET 
	[SC].[RiskVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [RI].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictRisks] [RI] 
	INNER JOIN [AppRisks] [AR]
	ON [AR].[Id] = [RI].[RiskId]
	WHERE [RI].[SocialConflictId] = [SC].[Id] AND
		  [RI].[IsDeleted] = 0 AND
		  [AR].[IsDeleted] = 0) [T]),
	[SC].[ManagementVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [MA].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictManagements] [MA] 
	INNER JOIN [AppManagements] [AP]
	ON [AP].[Id] = [MA].[ManagementId]
	INNER JOIN [AppPersons] [PP]
	ON [PP].[Id] = [MA].[ManagerId]
	WHERE [MA].[SocialConflictId] = [SC].[Id] AND
		  [MA].[IsDeleted] = 0 AND 
		  [AP].[IsDeleted] = 0 AND
		  [PP].[IsDeleted] = 0) [T]),
	[SC].[StateVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [ST].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictStates] [ST] 
	INNER JOIN [AppPersons] [PP]
	ON [PP].[Id] = [ST].[ManagerId]
	WHERE [ST].[SocialConflictId] = [SC].[Id] AND
		  [ST].[IsDeleted] = 0 AND
		  [PP].[IsDeleted] = 0) [T]),
	[SC].[ConditionVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [CO].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictConditions] [CO] 
	WHERE [CO].[SocialConflictId] = [SC].[Id] AND
		  [CO].[IsDeleted] = 0) [T])		  
	FROM [AppSocialConflicts] [SC]
	WHERE [SC].[Id] = @SocialConflictId

	UPDATE [AppSocialConflicts] SET
	[Verification] = (SELECT 
		CASE WHEN [D].[Count] = 7 THEN 2 WHEN [D].[Count] > 0 AND [D].[Count] <> 7 THEN 1 ELSE 0 END 
	FROM (SELECT SUM([T].[Verification]) AS [Count] FROM (
		SELECT CASE WHEN [CaseNameVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [DescriptionVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ProblemVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [RiskVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ManagementVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [StateVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ConditionVerification] = 1 THEN 1 ELSE 0 END [Verification]
	) [T]) [D])
	WHERE [Id] = @SocialConflictId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[social_conflict_sensible_verification]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[social_conflict_sensible_verification]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[social_conflict_sensible_verification]
@SocialConflictSensibleId INT
AS
BEGIN
	UPDATE [SS] SET 
	[SS].[RiskVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [RI].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictSensibleRisks] [RI] 
	INNER JOIN [AppRisks] [AR]
	ON [AR].[Id] = [RI].[RiskId]
	WHERE [RI].[SocialConflictSensibleId] = [SS].[Id] AND
		  [RI].[IsDeleted] = 0 AND
		  [AR].[IsDeleted] = 0) [T]),
	[SS].[ManagementVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [MA].[Verification] = 1 THEN 1 ELSE 0 END), 0 ) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictSensibleManagements] [MA] 
	INNER JOIN [AppManagements] [AP]
	ON [AP].[Id] = [MA].[ManagementId]
	INNER JOIN [AppPersons] [PP]
	ON [PP].[Id] = [MA].[ManagerId]
	WHERE [MA].[SocialConflictSensibleId] = [SS].[Id] AND
		  [MA].[IsDeleted] = 0 AND 
		  [AP].[IsDeleted] = 0 AND
		  [PP].[IsDeleted] = 0) [T]),
	[SS].[StateVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [ST].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictSensibleStates] [ST] 
	INNER JOIN [AppPersons] [PP]
	ON [PP].[Id] = [ST].[ManagerId]
	WHERE [ST].[SocialConflictSensibleId] = [SS].[Id] AND
		  [ST].[IsDeleted] = 0 AND
		  [PP].[IsDeleted] = 0) [T]),
	[SS].[ConditionVerification] = (SELECT CASE WHEN [T].[Verification] = [T].[Count] AND [T].[Count] > 0 THEN 1 ELSE 0 END FROM (
	SELECT 
		ISNULL(SUM(CASE WHEN [SC].[Verification] = 1 THEN 1 ELSE 0 END), 0) [Verification], 
		COUNT(*) [Count] 
	FROM [AppSocialConflictSensibleConditions] [SC] 
	WHERE [SC].[SocialConflictSensibleId] = [SS].[Id] AND
		  [SC].[IsDeleted] = 0) [T])		  
	FROM [AppSocialConflictSensibles] [SS]
	WHERE [SS].[Id] = @SocialConflictSensibleId

	UPDATE [AppSocialConflictSensibles] SET
	[Verification] = (SELECT 
		CASE WHEN [D].[Count] = 6 THEN 2 WHEN [D].[Count] > 0 AND [D].[Count] <> 6 THEN 1 ELSE 0 END 
	FROM (SELECT SUM([T].[Verification]) AS [Count] FROM (
		SELECT CASE WHEN [CaseNameVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ProblemVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [RiskVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ManagementVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [StateVerification] = 1 THEN 1 ELSE 0 END [Verification]
		UNION ALL 
		SELECT CASE WHEN [ConditionVerification] = 1 THEN 1 ELSE 0 END [Verification]
	) [T]) [D])
	WHERE [Id] = @SocialConflictSensibleId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[intervention_plan_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[intervention_plan_code]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[intervention_plan_code]
@InterventionPlanId INT
AS
BEGIN
	DECLARE @DATE DATETIME = GETDATE(), @YEAR INT

	SET @YEAR = YEAR(GETDATE())

	UPDATE A
	SET [A].[Year]  = @YEAR,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM [AppInterventionPlans] WHERE [Year] = @YEAR)
	FROM [AppInterventionPlans] A
	WHERE [Id] = @InterventionPlanId AND 
	      [Generation] = 0

	UPDATE A
	SET [A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + ' - ' + CONVERT(VARCHAR(4), [A].[Year])
	FROM [AppInterventionPlans] A
	WHERE [Id] = @InterventionPlanId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[intervention_plan_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[intervention_plan_code_replace]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[intervention_plan_code_replace]
@InterventionPlanId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE A
	SET [A].[Year]  = @YEAR,
		[A].[Generation] = 1,
		[A].[Count] = @Count,
		[A].[Code] =  CASE WHEN @Count < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM [AppInterventionPlans] A
	WHERE [Id] = @InterventionPlanId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[intervention_plan_state]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[intervention_plan_state]
END");
			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[intervention_plan_state]
@InterventionPlanId INT
AS
BEGIN
	UPDATE [IP] SET 
	[IP].[LastInterventionPlanRiskId] = (SELECT TOP 1 
						   [IPR].[Id]
						   FROM [AppInterventionPlanRisks] [IPR]
						   INNER JOIN [AppRisks] [R]
						   ON [IPR].[RiskId] = [R].[Id]
						   WHERE [IPR].[InterventionPlanId] = [IP].[Id] AND
							     [R].[IsDeleted] = 0 AND
						         [IPR].[IsDeleted] = 0
						   ORDER BY [IPR].[CreationTime] DESC)
	FROM [AppInterventionPlans] [IP]
	WHERE [Id] = @InterventionPlanId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[crisis_committee_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[crisis_committee_code]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[crisis_committee_code]
@CrisisCommitteeId INT
AS
BEGIN
	DECLARE @Year INT = YEAR(GETDATE())

	UPDATE [A]
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM [AppCrisisCommittees] WHERE [Year] = @Year)
	FROM [AppCrisisCommittees] A
	WHERE [Id] = @CrisisCommitteeId AND 
	      [Generation] = 0

	UPDATE [A]
	SET [A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [A].[Count]) + ' - ' + CONVERT(VARCHAR(4), [A].[Year])
	FROM [AppCrisisCommittees] A
	WHERE [Id] = @CrisisCommitteeId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[crisis_committee_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[crisis_committee_code_replace]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[crisis_committee_code_replace]
@CrisisCommitteeId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE [A]
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = @Count,
		[A].[Code] =  CASE WHEN @Count < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM [AppCrisisCommittees] A
	WHERE [Id] = @CrisisCommitteeId
END");
			
			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sector_meet_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[sector_meet_code]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[sector_meet_code]
@SectorMeetId INT
AS
BEGIN
	DECLARE @DATE DATETIME = GETDATE(), @YEAR INT

	SET @YEAR = YEAR(GETDATE())

	UPDATE S
	SET [S].[Year]  = @YEAR,
		[S].[Generation] = 1,
		[S].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM [AppSectorMeets] WHERE [Year] = @YEAR)
	FROM [AppSectorMeets] S
	WHERE [S].[Id] = @SectorMeetId AND 
	      [S].[Generation] = 0

	UPDATE S
	SET [S].[Code] =  CASE WHEN [S].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [S].[Count]) + ' - ' + CONVERT(VARCHAR(4), [S].[Year])
	FROM [AppSectorMeets] S
	WHERE [Id] = @SectorMeetId AND 
	      [Generation] = 1
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sector_meet_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[sector_meet_code_replace]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[sector_meet_code_replace]
@SectorMeetId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE [S]
	SET [S].[Year]  = @YEAR,
		[S].[Generation] = 1,
		[S].[Count] = @Count,
		[S].[Code] =  CASE WHEN @Count < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM [AppSectorMeets] [S]
	WHERE [S].[Id] = @SectorMeetId
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_crisis_comittee]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_crisis_comittee]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_crisis_comittee]
@CrisisComitteeId INT, @CreatorUserId INT, @Command VARCHAR(1)
AS
BEGIN

	--HEADER
	IF @Command = 'C'
	BEGIN
		SELECT 
		[CC].[Id] AS [CrisisCommitteeId],
		CONVERT(VARCHAR(10), [CC].[CrisisCommitteeTime], 103) AS [CrisisCommitteeTime],
		ISNULL([CC].[Code], '') AS [CrisisComitteeCode],
		ISNULL([CC].[CaseName], '') AS [CrisisComitteeCaseName],
		ISNULL([IP].[Code], '') AS [InterventionPlanCode],
		ISNULL([IP].[CaseName], '') AS [InterventionPlanCaseName],
		--TERRITORIAL UNITS
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppInterventionPlanLocations] [IPL] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [IPL].[TerritorialUnitId]
		WHERE [IPL].[InterventionPlanId] = [CC].[InterventionPlanId] AND
			  [IPL].[IsDeleted] = 0 AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [CrisisComitteeTerritorialUnits],
		CASE WHEN [PE].[Id] IS NOT NULL THEN ISNULL([PE].[Name], '') ELSE '' END AS [InterventionPlanCreator]
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppInterventionPlans] [IP]
		ON [IP].[Id] = [CC].[InterventionPlanId]
		LEFT JOIN [AppPersons] [PE]
		ON [PE].[Id] = [IP].[PersonId]
		WHERE [CC].[Id] = @CrisisComitteeId
	END
	
	--LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([IPL].[Ubication], '') AS [Ubication]
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppInterventionPlans] [IP]
		ON [IP].[Id] = [CC].[InterventionPlanId]
		INNER JOIN [AppInterventionPlanLocations] [IPL]
		ON [IPL].[InterventionPlanId] = [IP].[Id]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [IPL].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [IPL].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [IPL].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [IPL].[RegionId]
		WHERE [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
	END
	
	--TEAMS
	IF @Command = 'T'
	BEGIN
		SELECT 
		ISNULL([IPT].[Name], '') AS TeamMemberName,
		ISNULL([IPT].[Surname], '') AS TeamMemberSurname,
		ISNULL([IPT].[SecondSurname], '') AS TeamMemberSecondSurname,
		ISNULL([AR].[Name], '') AS AlertResponsible,
		ISNULL([CCJ].[Name], '') AS CrisisCommitteeJob
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeTeams] [IPT]
		ON [IPT].[CrisisCommitteeId] = [CC].[Id]
		LEFT JOIN [AppAlertResponsibles] [AR]
		ON [AR].[Id] = [IPT].[AlertResponsibleId]
		LEFT JOIN [AppCrisisCommitteeJobs] [CCJ]
		ON [CCJ].[Id]  = [IPT].[CrisisCommitteeJobId]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [IPT].[IsDeleted]  = 0 AND
			  [AR].[IsDeleted]   = 0 AND 
			  [CCJ].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [IPT].[Index]
	END

	--SCENARIES
	IF @Command = 'S'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCP].[Index] ASC) AS [Index],
		ISNULL([CCP].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteePlans] [CCP]
		ON [CCP].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCP].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCP].[Index]
	END

	--ACTIONS
	IF @Command = 'A'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCA].[Index] ASC) AS [Index],
		ISNULL([CCA].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeActions] [CCA]
		ON [CCA].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCA].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCA].[Index]
	END

	--MESSAGES
	IF @Command = 'M'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCM].[Index] ASC) AS [Index],
		ISNULL([CCM].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeMessage] [CCM]
		ON [CCM].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCM].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCM].[Index]
	END

	--CHANNELS
	IF @Command = 'H'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCC].[Index] ASC) AS [Index],
		ISNULL([CCC].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeChannels] [CCC]
		ON [CCC].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCC].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCC].[Index]
	END

	--INVOLVED SECTORS
	IF @Command = 'I'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCS].[Index] ASC) AS [Index],
		UPPER(ISNULL([DG].[ShortName], '')) AS [ShortName],
		UPPER(ISNULL([DG].[Name], '')) AS [Name],
		ISNULL([DGS].[Name], '') AS [Sector]
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeSectors] [CCS]
		ON [CCS].[CrisisCommitteeId] = [CC].[Id]
		INNER JOIN [AppDirectoryGovernments] [DG]
		ON [DG].[Id] = [CCS].[DirectoryGovernmentId]
		INNER JOIN [AppDirectoryGovernmentSectors] [DGS]
		ON [DGS].[Id] = [DG].[DirectoryGovernmentSectorId]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCS].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCS].[Index]
	END

	--TASKS
	IF @Command = 'K'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCT].[Index] ASC) AS [Index],
		ISNULL([CCT].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeTasks] [CCT]
		ON [CCT].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCT].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCT].[Index]
	END

	--ACTIVITIES
	IF @Command = 'V'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [CCA].[Index] ASC) AS [Index],
		ISNULL([CCA].[Description], '') AS Description
		FROM [AppCrisisCommittees] [CC]
		INNER JOIN [AppCrisisCommitteeAgreements] [CCA]
		ON [CCA].[CrisisCommitteeId] = [CC].[Id]
		WHERE [CC].[IsDeleted]   = 0 AND
			  [CCA].[IsDeleted]  = 0 AND
			  [CC].[Id] = @CrisisComitteeId
		ORDER BY [CCA].[Index]
	END
END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_intervention_plan]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_intervention_plan]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_intervention_plan]
@InterventionPlanId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS
BEGIN
	--HEADER
	IF @Command = 'C'
	BEGIN
		SELECT 
		[IP].[Id] AS [InterventionPlanId],
		CONVERT(VARCHAR(10), [IP].[InterventionPlanTime], 103) AS [InterventionPlanTime],
		ISNULL([IP].[Code], '') AS [InterventionPlanCode],
		[IP].[CaseName] AS [InterventionPlanCaseName],
		CASE WHEN [IP].[SocialConflictSensibleId] IS NOT NULL THEN '1' ELSE '0' END [ConflictSite],
		ISNULL([SC].[Code], '') AS [SocialConflictCode],
		ISNULL([SC].[CaseName], '') AS [SocialConflictCaseName],
		ISNULL([SCS].[Code], '') AS [SocialConflictSensibleCode],
		ISNULL([SCS].[CaseName], '') AS [SocialConflictSensibleCaseName],
		--TERRITORIAL UNITS
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppInterventionPlanLocations] [IPL] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [IPL].[TerritorialUnitId]
		WHERE [IPL].[InterventionPlanId] = [IP].[Id] AND
			  [IPL].[IsDeleted] = 0 AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [InterventionPlanTerritorialUnits],
		CASE WHEN [PE].[Id] IS NOT NULL THEN ISNULL([PE].[Name], '') ELSE '' END AS [InterventionPlanCreator],
		CASE WHEN [IP].[LastInterventionPlanRiskId] IS NOT NULL AND [IPR].[IsDeleted] = 0 AND [R].[IsDeleted] = 0  
			THEN ISNULL([R].[Name], '') ELSE 'Ninguno' END AS [RiskName],
		CASE WHEN [IP].[LastInterventionPlanRiskId] IS NOT NULL AND [IPR].[IsDeleted] = 0 AND [R].[IsDeleted] = 0  
			THEN ISNULL([R].[Color], '') ELSE '#787878' END AS [RiskColor]
		FROM [AppInterventionPlans] [IP]
		LEFT JOIN [AppSocialConflicts] [SC]
		ON  [SC].[Id] = [IP].[SocialConflictId]
		LEFT JOIN [AppSocialConflictSensibles] [SCS]
		ON  [SCS].[Id] = [IP].[SocialConflictSensibleId]
		LEFT JOIN [AppPersons] [PE]
		ON [PE].[Id] = [IP].[PersonId]
		LEFT JOIN [AppInterventionPlanRisks] [IPR]
		ON [IPR].[Id] = [IP].[LastInterventionPlanRiskId]
		LEFT JOIN [AppRisks] [R]
		ON [R].[Id] = [IPR].[RiskId]
		WHERE [IP].[Id] = @InterventionPlanId AND
		      [IP].[IsDeleted] = 0
	END

	--LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([IPL].[Ubication], '') AS [Ubication]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInterventionPlanLocations] [IPL]
		ON [IPL].[InterventionPlanId] = [IP].[Id]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [IPL].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [IPL].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [IPL].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [IPL].[RegionId]
		WHERE [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END

	-- ACTORS
	IF @Command = 'A'
	BEGIN

		DECLARE @ConflictSite INT, @SocialConflictSensibleId INT, @SocialConflictId INT

		SELECT  
		@ConflictSite = 
		CASE WHEN [IP].[SocialConflictSensibleId] IS NOT NULL THEN 1 
			 WHEN [IP].[SocialConflictId] IS NOT NULL THEN 0 
			 ELSE 2 END,
		@SocialConflictId = [IP].[SocialConflictId],
		@SocialConflictSensibleId = [IP].[SocialConflictSensibleId]
		FROM [AppInterventionPlans] [IP]
		WHERE [IP].[Id] = @InterventionPlanId

		IF @ConflictSite = 0
		BEGIN
			SELECT 
			[AC].[Name],
			ISNULL([AC].[Job], '') AS [Job],
			ISNULL([AC].[Community], '') AS [Community],
			CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
				THEN [AT].[Name] ELSE '' END [Type],
			CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
					  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
					  [AT].[ShowMovement] = 1
				THEN [AM].[Name] ELSE '' END [Movement],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
				THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
				THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
			FROM [AppSocialConflictActors] [AC]
			INNER JOIN [AppSocialConflicts] [SC]
			ON [SC].[Id] = [AC].[SocialConflictId] 
			LEFT JOIN [AppActorTypes] [AT]
			ON [AT].[Id] = [AC].[ActorTypeId] 
			LEFT JOIN [AppActorMovements] [AM]
			ON [AM].[Id] = [AC].[ActorMovementId] 
			WHERE [AC].[IsDeleted] = 0 AND
				  [SC].[IsDeleted] = 0 AND
				  [SC].[Id]        = @SocialConflictId
		END

		IF @ConflictSite = 1
		BEGIN
			SELECT 
			[AC].[Name],
			ISNULL([AC].[Job], '') AS [Job],
			ISNULL([AC].[Community], '') AS [Community],
			CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
				THEN [AT].[Name] ELSE '' END [Type],
			CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
					  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
					  [AT].[ShowMovement] = 1
				THEN [AM].[Name] ELSE '' END [Movement],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
				THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
			CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
				THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
			FROM [AppSocialConflictActors] [AC]
			INNER JOIN [AppSocialConflictSensibles] [SC]
			ON [SC].[Id] = [AC].[SocialConflictSensibleId] 
			LEFT JOIN [AppActorTypes] [AT]
			ON [AT].[Id] = [AC].[ActorTypeId] 
			LEFT JOIN [AppActorMovements] [AM]
			ON [AM].[Id] = [AC].[ActorMovementId] 
			WHERE [AC].[IsDeleted] = 0 AND
				  [SC].[IsDeleted] = 0 AND
				  [SC].[Id]        = @SocialConflictSensibleId
		END
	END

	--OBJETIVES
	IF @Command = 'O'
	BEGIN
		SELECT 
		ISNULL([IPM].[Description], '') AS [Description],
		ISNULL([IPM].[Methodology], '') AS [Methodology],
		ISNULL([IPO].[Name], '') AS [Option]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInteventionPlanMethodologies] [IPM]
		ON [IPM].[InterventionPlanId] = [IP].[Id]
		INNER JOIN [AppInterventionPlanOptions] [IPO]
		ON [IPO].[Id] = [IPM].[InterventionPlanOptionId]
		WHERE [IP].[IsDeleted]  = 0 AND
			  [IPM].[IsDeleted] = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END

	--SCHEDULES
	IF @Command = 'S'
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), [IPS].[ScheduleTime], 103) AS [ScheduleTime],
		ISNULL([IPS].[Schedule], '') AS [Schedule],
		CASE WHEN [IPE].[Type] = 1 THEN ISNULL([DG].[Name], '')
			 WHEN [IPE].[Type] = 2 THEN ISNULL([AR].[Name], '') 
			 ELSE ISNULL([IPS].[Entity], '') END AS [ScheduleActor],
		ISNULL([IPM].[Methodology], '') AS [Objective]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInterventionPlanSchedules] [IPS]
		ON [IPS].[InterventionPlanId] = [IP].[Id]
		INNER JOIN [AppInterventionPlanEntities] [IPE]
		ON [IPE].[Id] = [IPS].[InterventionPlanEntityId]
		LEFT JOIN [AppInteventionPlanMethodologies] [IPM]
		ON [IPM].[Id] = [IPS].[InterventionPlanMethodologyId]
		LEFT JOIN [AppAlertResponsibles] [AR]
		ON [AR].[Id] = [IPS].[AlertResponsibleId]
		LEFT JOIN [AppDirectoryGovernments] [DG]
		ON [DG].[Id] = [IPS].[DirectoryGovernmentId]
		WHERE [IP].[IsDeleted]  = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END

	--TEAMS
	IF @Command = 'T'
	BEGIN
		SELECT 
		UPPER(ISNULL([IPT].[Name], '')) AS [Name],
		UPPER(ISNULL([IPT].[Surname], '')) AS [Surname],
		UPPER(ISNULL([IPT].[SecondSurname], '')) AS [SecondSurname],
		ISNULL([IPT].[Job], '') AS [Job],
		CASE WHEN [DG].[Id] IS NOT NULL THEN ISNULL([DG].[Name], '') 
			 WHEN [AR].[Id] IS NOT NULL THEN ISNULL([AR].[Name], '') 
			 ELSE ISNULL([IPT].[Entity], '') END AS [TeamActor],
		ISNULL([IPR].[Name], '') AS [Role],
		ISNULL([IPR].[ShowDescription], 0) AS [RoleShowDescription],
		ISNULL([IPT].[Role], '') AS [RoleDescription]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInterventionPlanTeams] [IPT]
		ON [IPT].[InterventionPlanId] = [IP].[Id]
		LEFT JOIN [AppInterventionPlanRoles] [IPR]
		ON [IPR].[Id] = [IPT].[InterventionPlanRoleId]
		LEFT JOIN [AppAlertResponsibles] [AR]
		ON [AR].[Id] = [IPT].[AlertResponsibleId]
		LEFT JOIN [AppDirectoryGovernments] [DG]
		ON [DG].[Id] = [IPT].[DirectoryGovernmentId]
		WHERE [IP].[IsDeleted]  = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END

	--SOLUTIONS
	IF @Command = 'K'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [IPS].[Id] DESC) AS [Index],
		ISNULL([IPS].[Description], '') AS [Description]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInterventionPlanSolutions] [IPS]
		ON [IPS].[InterventionPlanId] = [IP].[Id]
		WHERE [IP].[IsDeleted]   = 0 AND
			  [IPS].[IsDeleted]  = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END

	--STATES
	IF @Command = 'F'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [IPS].[Id] DESC) AS [Index],
		ISNULL([IPS].[Description], '') AS [Description]
		FROM [AppInterventionPlans] [IP]
		INNER JOIN [AppInterventionPlanStates] [IPS]
		ON [IPS].[InterventionPlanId] = [IP].[Id]
		WHERE [IP].[IsDeleted]   = 0 AND
			  [IPS].[IsDeleted]  = 0 AND
			  [IP].[Id] = @InterventionPlanId
	END
END");
			_context.Database.ExecuteSqlRaw(@"
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_public_social_conflict_alert]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_public_social_conflict_alert]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_public_social_conflict_alert]
@TerritorialUnitId INT, @DepartmentId INT, @ProvinceId INT, @SocialConflictId INT, @Command VARCHAR(1)
AS
BEGIN
	-- [S] ALERT BY LAST CLOSED STATE
	-- [A] ALTER BY SECTOR ATTENTION
	-- [R] ALERT BY LAST CLOSED RISK
	-- [T] ALERT BY TYPOLOGIES
	-- [L] ALERT BY TERRITORIAL UNITS

	--ALERT BY LAST CLOSED STATE
	IF @Command = 'S'
	BEGIN
		SELECT 
			ISNULL([S].[Name], '') AS [Name],
			COUNT(*) AS [Count]
		FROM [AppSocialConflictAlerts] [A]
		INNER JOIN [AppSocialConflictAlertSeals] [AS]
		ON [AS].[Id] = [A].[LastSealId] AND [AS].[IsDeleted] = 0
		INNER JOIN [AppAlertSeals] [S]
		ON [AS].[AlertSealId] = [S].[Id] AND [S].[IsDeleted] = 0
		WHERE [A].[IsDeleted] = 0 AND
		(@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictAlertLocations [AL] 
			 WHERE [AL].[SocialConflictAlertId] = [A].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId) AND 
				   [AL].[IsDeleted]    = 0) > 0
		)
		GROUP BY [S].[Id], [S].[Name]
		ORDER BY [S].[Name]
	END

	--ALTER BY SECTOR ATTENTION
	IF @Command = 'A'
	BEGIN
		SELECT 
			CONCAT(CONVERT(VARCHAR, ISNULL([S].[Index], '')), '. ' , ISNULL([S].[Name], '')) AS [Name],
			COUNT(*) AS [Count]
		FROM [AppSocialConflictAlerts] [A]
		INNER JOIN [AppSocialConflictAlertSectors] [AS]
		ON [AS].[Id] = [A].[LastSectorId] AND [AS].[IsDeleted] = 0
		INNER JOIN [AppAlertSectors] [S]
		ON [AS].[AlertSectorId] = [S].[Id] AND [S].[IsDeleted] = 0
		WHERE [A].[IsDeleted] = 0 AND
		(@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictAlertLocations [AL] 
			 WHERE [AL].[SocialConflictAlertId] = [A].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId) AND 
				   [AL].[IsDeleted]    = 0) > 0
		)
		GROUP BY [S].[Id], [S].[Name], [S].[Index]
		ORDER BY [S].[Index]
	END

	--ALERT BY LAST CLOSED RISK
	IF @Command = 'R'
	BEGIN
		SELECT 
			ISNULL([R].[Name], '') AS [Name],
			[R].[Color],
			COUNT(*) AS [Count]
		FROM [AppSocialConflictAlerts] [A]
		INNER JOIN [AppSocialConflictAlertRisks] [AR]
		ON [AR].[Id] = [A].[LastAlertRiskId] AND [AR].[IsDeleted] = 0
		INNER JOIN [AppAlertRisks] [R]
		ON [AR].[AlertRiskId] = [R].[Id] AND [R].[IsDeleted] = 0
		WHERE [A].[IsDeleted] = 0 AND
		(@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictAlertLocations [AL] 
			 WHERE [AL].[SocialConflictAlertId] = [A].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId) AND 
				   [AL].[IsDeleted]    = 0) > 0
		)
		GROUP BY [R].[Id], [R].[Name], [R].[Color]
	END

	--ALERT BY TYPOLOGIES
	IF @Command = 'T'
	BEGIN
		SELECT
		[T].[Name],
		COUNT(*) AS [Count]
		FROM [AppSocialConflictAlerts] [A]
		INNER JOIN [AppTypologies] [T]
		ON [T].[Id] = [A].[TypologyId]
		WHERE [A].[IsDeleted] = 0 AND
		(@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictAlertLocations [AL] 
			 WHERE [AL].[SocialConflictAlertId] = [A].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId) AND 
				   [AL].[IsDeleted]    = 0) > 0
		)
		GROUP BY [T].[Id], [T].[Name]
		ORDER BY [T].[Name]
	END

	--ALERT BY TERRITORIAL UNITS
	IF @Command = 'L'
	BEGIN
		--FILTER BY PROVINCE
		IF @ProvinceId > 0
		BEGIN
			SELECT [B].[Name], COUNT(*) AS [Count] FROM (
				SELECT
				[D].[Id],
				[D].[Name]
				FROM [AppSocialConflictAlerts] [A]
				INNER JOIN [AppSocialConflictAlertLocations] [SCL]
				ON [SCL].[SocialConflictAlertId] = [A].[Id]
				INNER JOIN [AppProvinces] [P]
				ON [P].[Id] = [SCL].[ProvinceId]
				INNER JOIN [AppDistricts] [D]
				ON [D].[Id] = [SCL].[DistrictId]
				WHERE [A].[IsDeleted] = 0 AND
					  [P].[IsDeleted] = 0 AND
					  [D].[IsDeleted] = 0 AND
					  [SCL].[ProvinceId] = @ProvinceId AND
					  (@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId)
				GROUP BY [A].[Id], [D].[Id], [D].[Name])
			AS [B]
			GROUP BY [B].[Id], [B].[Name]
			ORDER BY [B].[Name]
		END
		ELSE
		BEGIN
			--FILTER BY DEPARTMENT
			IF @DepartmentId > 0
			BEGIN
				SELECT [B].[Name], COUNT(*) AS [Count] FROM (
					SELECT
					[P].[Id],
					[P].[Name]
					FROM [AppSocialConflictAlerts] [A]
					INNER JOIN [AppSocialConflictAlertLocations] [SCL]
					ON [SCL].[SocialConflictAlertId] = [A].[Id]
					INNER JOIN [AppDepartments] [D]
					ON [D].[Id] = [SCL].[DepartmentId]
					INNER JOIN [AppProvinces] [P]
					ON [P].[Id] = [SCL].[ProvinceId]
					WHERE [A].[IsDeleted] = 0 AND
						  [D].[IsDeleted] = 0 AND
						  [P].[IsDeleted] = 0 AND
						  [SCL].[DepartmentId] = @DepartmentId AND
						  (@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId)
					GROUP BY [A].[Id], [P].[Id], [P].[Name])
				AS [B]
				GROUP BY [B].[Id], [B].[Name]
				ORDER BY [B].[Name]
			END

			ELSE
			BEGIN
				--FILTER BY TERRITORIAL UNIT
				IF @TerritorialUnitId > 0
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[D].[Id],
						[D].[Name]
						FROM [AppSocialConflictAlerts] [A]
						INNER JOIN [AppSocialConflictAlertLocations] [SCL]
						ON [SCL].[SocialConflictAlertId] = [A].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						INNER JOIN [AppDepartments] [D]
						ON [D].[Id] = [SCL].[DepartmentId]
						WHERE [A].[IsDeleted] = 0 AND
							  [D].[IsDeleted] = 0 AND
							  [T].[IsDeleted] = 0 AND
							  [SCL].[TerritorialUnitId] = @TerritorialUnitId AND
							  (@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId)
						GROUP BY [A].[Id], [D].[Id], [D].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
				--FILTER EMPTY
				ELSE
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[T].[Id],
						[T].[Name]
						FROM [AppSocialConflictAlerts] [A]
						INNER JOIN [AppSocialConflictAlertLocations] [SCL]
						ON [SCL].[SocialConflictAlertId] = [A].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						WHERE [A].[IsDeleted] = 0 AND
							  [T].[IsDeleted] = 0 AND
							  (@SocialConflictId <= 0 OR [A].[SocialConflictId] = @SocialConflictId)
						GROUP BY [A].[Id], [T].[Id], [T].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
			END
		END
	END

END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_public_social_conflict]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_public_social_conflict]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_public_social_conflict]
@TerritorialUnitId INT = -1, @DepartmentId INT= -1, @ProvinceId INT= -1, @SocialConflictId INT= -1, @SocialConflictRiskId INT = -1, @GeographycType INT = -1, @Command VARCHAR(1) 
AS
BEGIN
	-- [R] CONFLICT BY RISKS
	-- [L] CONFLICT BY LOCATIONS
	-- [G] CONFLICT BY GEOGRAPHYC

	-- CONFLICT BY RISKS
	IF @Command = 'R'
	BEGIN
		SELECT 
			ISNULL([R].[Name], '') AS [Name],
			[R].[Color],
			COUNT(*) AS [Count]
		FROM [AppSocialConflicts] [SC]
		INNER JOIN [AppSocialConflictRisks] [SR]
		ON [SR].[Id] = [SC].[LastSocialConflictRiskId] AND [SR].[IsDeleted] = 0
		INNER JOIN [AppRisks] [R]
		ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
		WHERE [SC].[IsDeleted] = 0 AND
		(@GeographycType <= 0 OR (CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END) = @GeographycType) AND
		(@SocialConflictRiskId <= 0 OR [R].[Id] = @SocialConflictRiskId) AND
		(@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictLocations [AL] 
			 WHERE [AL].[SocialConflictId] = [SC].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId)) > 0
		)
		GROUP BY [R].[Id], [R].[Name], [R].[Color]
	END

	-- CONFLICT BY GEOGRAPHYC
	IF @Command = 'G'
	BEGIN
		SELECT 
		CASE WHEN [GeographicType] = 3 THEN 'Nacional' 
			 WHEN [GeographicType] = 2 THEN 'Multiregional' 
			 ELSE 'Regional' END AS [Name],
		SUM([B].[Count]) AS [Count]
		FROM (SELECT
		CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END AS [GeographicType],
		COUNT(*) AS [Count]
		FROM [AppSocialConflicts] [SC]
		WHERE [SC].[IsDeleted] = 0 AND
		(@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM AppSocialConflictLocations [SCL] 
			 WHERE [SCL].[SocialConflictId] = [SC].[Id] AND
				   (@TerritorialUnitId <= 0 OR [SCL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [SCL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [SCL].[ProvinceId]   = @ProvinceId)) > 0
		) AND
		(@SocialConflictRiskId <= 0 OR (
			SELECT COUNT(*) FROM [AppSocialConflictRisks] [SR]
			INNER JOIN [AppRisks] [R]
			ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
			WHERE [SR].[Id] = [SC].[LastSocialConflictRiskId] AND 
				  [R].[Id] = @SocialConflictRiskId AND
				  [SR].[IsDeleted] = 0) > 0
		)
		GROUP BY [SC].[GeographicType]) AS [B]
		WHERE (@GeographycType <= 0 OR [B].[GeographicType] = @GeographycType) 
		GROUP BY [B].[GeographicType]
	END

	--ALERT BY TERRITORIAL UNITS
	IF @Command = 'L'
	BEGIN
		--FILTER BY PROVINCE
		IF @ProvinceId > 0
		BEGIN
			SELECT [B].[Name], COUNT(*) AS [Count] FROM (
				SELECT
				[D].[Id],
				[D].[Name]
				FROM [AppSocialConflicts] [SC]
				INNER JOIN [AppSocialConflictLocations] [SCL]
				ON [SCL].[SocialConflictId] = [SC].[Id]
				INNER JOIN [AppProvinces] [P]
				ON [P].[Id] = [SCL].[ProvinceId]
				INNER JOIN [AppDistricts] [D]
				ON [D].[Id] = [SCL].[DistrictId]
				WHERE [SC].[IsDeleted] = 0 AND
					  (@GeographycType <= 0 OR (CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END) = @GeographycType) AND
					  [P].[IsDeleted] = 0 AND
					  [D].[IsDeleted] = 0 AND
					  [SCL].[ProvinceId] = @ProvinceId AND
					  (@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId) AND
				(@SocialConflictRiskId <= 0 OR (
					SELECT COUNT(*) FROM [AppSocialConflictRisks] [SR]
					INNER JOIN [AppRisks] [R]
					ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
					WHERE [SR].[Id] = [SC].[LastSocialConflictRiskId] AND 
						  [R].[Id] = @SocialConflictRiskId AND
						  [SR].[IsDeleted] = 0) > 0
				)
				GROUP BY [SC].[Id], [D].[Id], [D].[Name])
			AS [B]
			GROUP BY [B].[Id], [B].[Name]
			ORDER BY [B].[Name]
		END
		ELSE
		BEGIN
			--FILTER BY DEPARTMENT
			IF @DepartmentId > 0
			BEGIN
				SELECT [B].[Name], COUNT(*) AS [Count] FROM (
					SELECT
					[P].[Id],
					[P].[Name]
					FROM [AppSocialConflicts] [SC]
					INNER JOIN [AppSocialConflictLocations] [SCL]
					ON [SCL].[SocialConflictId] = [SC].[Id]
					INNER JOIN [AppDepartments] [D]
					ON [D].[Id] = [SCL].[DepartmentId]
					INNER JOIN [AppProvinces] [P]
					ON [P].[Id] = [SCL].[ProvinceId]
					WHERE [SC].[IsDeleted] = 0 AND
						  (@GeographycType <= 0 OR (CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END) = @GeographycType) AND
						  [D].[IsDeleted] = 0 AND
						  [P].[IsDeleted] = 0 AND
						  [SCL].[DepartmentId] = @DepartmentId AND
						  (@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId)AND
						  (@SocialConflictRiskId <= 0 OR (
							SELECT COUNT(*) FROM [AppSocialConflictRisks] [SR]
							INNER JOIN [AppRisks] [R]
							ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
							WHERE [SR].[Id] = [SC].[LastSocialConflictRiskId] AND 
								  [R].[Id] = @SocialConflictRiskId AND
								  [SR].[IsDeleted] = 0) > 0
						  )
					GROUP BY [SC].[Id], [P].[Id], [P].[Name])
				AS [B]
				GROUP BY [B].[Id], [B].[Name]
				ORDER BY [B].[Name]
			END

			ELSE
			BEGIN
				--FILTER BY TERRITORIAL UNIT
				IF @TerritorialUnitId > 0
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[D].[Id],
						[D].[Name]
						FROM [AppSocialConflicts] [SC]
						INNER JOIN [AppSocialConflictLocations] [SCL]
						ON [SCL].[SocialConflictId] = [SC].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						INNER JOIN [AppDepartments] [D]
						ON [D].[Id] = [SCL].[DepartmentId]
						WHERE [SC].[IsDeleted] = 0 AND
							  (@GeographycType <= 0 OR (CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END) = @GeographycType) AND
							  [D].[IsDeleted] = 0 AND
							  [T].[IsDeleted] = 0 AND
							  [SCL].[TerritorialUnitId] = @TerritorialUnitId AND
							  (@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId) AND
							  (@SocialConflictRiskId <= 0 OR (
									SELECT COUNT(*) FROM [AppSocialConflictRisks] [SR]
									INNER JOIN [AppRisks] [R]
									ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
									WHERE [SR].[Id] = [SC].[LastSocialConflictRiskId] AND 
										  [R].[Id] = @SocialConflictRiskId AND
										  [SR].[IsDeleted] = 0) > 0
							   )
						GROUP BY [SC].[Id], [D].[Id], [D].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
				--FILTER EMPTY
				ELSE
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[T].[Id],
						[T].[Name]
						FROM [AppSocialConflicts] [SC]
						INNER JOIN [AppSocialConflictLocations] [SCL]
						ON [SCL].[SocialConflictId] = [SC].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						WHERE [SC].[IsDeleted] = 0 AND
							  (@GeographycType <= 0 OR (CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END) = @GeographycType) AND
							  [T].[IsDeleted] = 0 AND
							  (@SocialConflictId <= 0 OR [SC].[Id] = @SocialConflictId) AND
							  (@SocialConflictRiskId <= 0 OR (
								SELECT COUNT(*) FROM [AppSocialConflictRisks] [SR]
								INNER JOIN [AppRisks] [R]
								ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
								WHERE [SR].[Id] = [SC].[LastSocialConflictRiskId] AND 
								      [R].[Id] = @SocialConflictRiskId AND
									  [SR].[IsDeleted] = 0) > 0
							  )
						GROUP BY [SC].[Id], [T].[Id], [T].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
			END
		END
	END

END");

			_context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_public_social_conflict_sensible]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_public_social_conflict_sensible]
END");

			_context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_public_social_conflict_sensible]
@TerritorialUnitId INT = -1, @DepartmentId INT= -1, @ProvinceId INT= -1, @SocialConflictSensibleRiskId INT = -1, @GeographycType INT = -1, @Command VARCHAR(1)
AS
BEGIN
	-- [R] CONFLICT SENSIBLE BY RISKS
	-- [L] CONFLICT SENSIBLE BY LOCATIONS
	-- [G] CONFLICT SENSIBLE BY GEOGRAPHYC

	-- CONFLICT SENSIBLE BY RISKS
	IF @Command = 'R'
	BEGIN
		SELECT 
			ISNULL([R].[Name], '') AS [Name],
			[R].[Color],
			COUNT(*) AS [Count]
		FROM [AppSocialConflictSensibles] [SCS]
		INNER JOIN [AppSocialConflictSensibleRisks] [SR]
		ON [SR].[Id] = [SCS].[LastSocialConflictSensibleRiskId] AND [SR].[IsDeleted] = 0
		INNER JOIN [AppRisks] [R]
		ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
		WHERE [SCS].[IsDeleted] = 0 AND
		(@GeographycType <= 0 OR (CASE WHEN [SCS].[GeographicType] = 0 THEN 1 ELSE [SCS].[GeographicType] END) = @GeographycType) AND
		(@SocialConflictSensibleRiskId <= 0 OR [R].[Id] = @SocialConflictSensibleRiskId) AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM [AppSocialConflictSensibleLocations] [AL] 
			 WHERE [AL].[SocialConflictSensibleId] = [SCS].[Id] AND
				   (@TerritorialUnitId <= 0 OR [AL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [AL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [AL].[ProvinceId]   = @ProvinceId)) > 0
		)
		GROUP BY [R].[Id], [R].[Name], [R].[Color]
	END

	-- CONFLICT SENSIBLE BY GEOGRAPHYC
	IF @Command = 'G'
	BEGIN
		SELECT 
		CASE WHEN [GeographicType] = 3 THEN 'Nacional' 
			 WHEN [GeographicType] = 2 THEN 'Multiregional' 
			 ELSE 'Regional' END AS [Name],
		SUM([B].[Count]) AS [Count]
		FROM (SELECT
		CASE WHEN [SSC].[GeographicType] = 0 THEN 1 ELSE [SSC].[GeographicType] END AS [GeographicType],
		COUNT(*) AS [Count]
		FROM [AppSocialConflictSensibles] [SSC]
		WHERE [SSC].[IsDeleted] = 0 AND
		((@TerritorialUnitId <= 0 AND @DepartmentId <= 0 AND @ProvinceId <= 0) OR
			(SELECT COUNT(*) FROM [AppSocialConflictSensibleLocations] [SCL] 
			 WHERE [SCL].[SocialConflictSensibleId] = [SSC].[Id] AND
				   (@TerritorialUnitId <= 0 OR [SCL].[TerritorialUnitId] = @TerritorialUnitId) AND 
			       (@DepartmentId <= 0 OR [SCL].[DepartmentId] = @DepartmentId) AND 
			       (@ProvinceId <= 0 OR [SCL].[ProvinceId]   = @ProvinceId)) > 0
		) AND
		(@SocialConflictSensibleRiskId <= 0 OR (
			SELECT COUNT(*) FROM [AppSocialConflictSensibleRisks] [SR]
			INNER JOIN [AppRisks] [R]
			ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
			WHERE [SR].[Id] = [SSC].[LastSocialConflictSensibleRiskId] AND 
				  [R].[Id] = @SocialConflictSensibleRiskId AND
				  [SR].[IsDeleted] = 0) > 0
		)
		GROUP BY [SSC].[GeographicType]) AS [B]
		WHERE (@GeographycType <= 0 OR [B].[GeographicType] = @GeographycType) 
		GROUP BY [B].[GeographicType]
	END

	-- [G] CONFLICT SENSIBLE BY LOCATIONS
	IF @Command = 'L'
	BEGIN
		--FILTER BY PROVINCE
		IF @ProvinceId > 0
		BEGIN
			SELECT [B].[Name], COUNT(*) AS [Count] FROM (
				SELECT
				[D].[Id],
				[D].[Name]
				FROM [AppSocialConflictSensibles] [SSC]
				INNER JOIN [AppSocialConflictSensibleLocations] [SCL]
				ON [SCL].[SocialConflictSensibleId] = [SSC].[Id]
				INNER JOIN [AppProvinces] [P]
				ON [P].[Id] = [SCL].[ProvinceId]
				INNER JOIN [AppDistricts] [D]
				ON [D].[Id] = [SCL].[DistrictId]
				WHERE [SSC].[IsDeleted] = 0 AND
					  (@GeographycType <= 0 OR (CASE WHEN [SSC].[GeographicType] = 0 THEN 1 ELSE [SSC].[GeographicType] END) = @GeographycType) AND
					  [P].[IsDeleted] = 0 AND
					  [D].[IsDeleted] = 0 AND
					  [SCL].[ProvinceId] = @ProvinceId AND
				(@SocialConflictSensibleRiskId <= 0 OR (
					SELECT COUNT(*) FROM [AppSocialConflictSensibleRisks] [SR]
					INNER JOIN [AppRisks] [R]
					ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
					WHERE [SR].[Id] = [SSC].[LastSocialConflictSensibleRiskId] AND 
						  [R].[Id] = @SocialConflictSensibleRiskId AND
						  [SR].[IsDeleted] = 0) > 0
				)
				GROUP BY [SSC].[Id], [D].[Id], [D].[Name])
			AS [B]
			GROUP BY [B].[Id], [B].[Name]
			ORDER BY [B].[Name]
		END
		ELSE
		BEGIN
			--FILTER BY DEPARTMENT
			IF @DepartmentId > 0
			BEGIN
				SELECT [B].[Name], COUNT(*) AS [Count] FROM (
					SELECT
					[P].[Id],
					[P].[Name]
					FROM [AppSocialConflictSensibles] [SSC]
					INNER JOIN [AppSocialConflictSensibleLocations] [SCL]
					ON [SCL].[SocialConflictSensibleId] = [SSC].[Id]
					INNER JOIN [AppDepartments] [D]
					ON [D].[Id] = [SCL].[DepartmentId]
					INNER JOIN [AppProvinces] [P]
					ON [P].[Id] = [SCL].[ProvinceId]
					WHERE [SSC].[IsDeleted] = 0 AND
						  (@GeographycType <= 0 OR (CASE WHEN [SSC].[GeographicType] = 0 THEN 1 ELSE [SSC].[GeographicType] END) = @GeographycType) AND
						  [D].[IsDeleted] = 0 AND
						  [P].[IsDeleted] = 0 AND
						  [SCL].[DepartmentId] = @DepartmentId AND
						  (@SocialConflictSensibleRiskId <= 0 OR (
								SELECT COUNT(*) FROM [AppSocialConflictSensibleRisks] [SR]
								INNER JOIN [AppRisks] [R]
								ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
								WHERE [SR].[Id] = [SSC].[LastSocialConflictSensibleRiskId] AND 
									  [R].[Id] = @SocialConflictSensibleRiskId AND
									  [SR].[IsDeleted] = 0) > 0
							)
					GROUP BY [SSC].[Id], [P].[Id], [P].[Name])
				AS [B]
				GROUP BY [B].[Id], [B].[Name]
				ORDER BY [B].[Name]
			END

			ELSE
			BEGIN
				--FILTER BY TERRITORIAL UNIT
				IF @TerritorialUnitId > 0
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[D].[Id],
						[D].[Name]
						FROM [AppSocialConflictSensibles] [SSC]
						INNER JOIN [AppSocialConflictSensibleLocations] [SCL]
						ON [SCL].[SocialConflictSensibleId] = [SSC].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						INNER JOIN [AppDepartments] [D]
						ON [D].[Id] = [SCL].[DepartmentId]
						WHERE [SSC].[IsDeleted] = 0 AND
							  (@GeographycType <= 0 OR (CASE WHEN [SSC].[GeographicType] = 0 THEN 1 ELSE [SSC].[GeographicType] END) = @GeographycType) AND
							  [D].[IsDeleted] = 0 AND
							  [T].[IsDeleted] = 0 AND
							  [SCL].[TerritorialUnitId] = @TerritorialUnitId AND
							  (@SocialConflictSensibleRiskId <= 0 OR (
								SELECT COUNT(*) FROM [AppSocialConflictSensibleRisks] [SR]
								INNER JOIN [AppRisks] [R]
								ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
								WHERE [SR].[Id] = [SSC].[LastSocialConflictSensibleRiskId] AND 
									  [R].[Id] = @SocialConflictSensibleRiskId AND
									  [SR].[IsDeleted] = 0) > 0
							  )
						GROUP BY [SSC].[Id], [D].[Id], [D].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
				--FILTER EMPTY
				ELSE
				BEGIN
					SELECT [B].[Name], COUNT(*) AS [Count] FROM (
						SELECT
						[T].[Id],
						[T].[Name]
						FROM [AppSocialConflictSensibles] [SSC]
						INNER JOIN [AppSocialConflictSensibleLocations] [SCL]
						ON [SCL].[SocialConflictSensibleId] = [SSC].[Id]
						INNER JOIN [AppTerritorialUnits] [T]
						ON [T].[Id] = [SCL].[TerritorialUnitId]
						WHERE [SSC].[IsDeleted] = 0 AND
							  (@GeographycType <= 0 OR (CASE WHEN [SSC].[GeographicType] = 0 THEN 1 ELSE [SSC].[GeographicType] END) = @GeographycType) AND
							  [T].[IsDeleted] = 0 AND
							  (@SocialConflictSensibleRiskId <= 0 OR (
								SELECT COUNT(*) FROM [AppSocialConflictSensibleRisks] [SR]
								INNER JOIN [AppRisks] [R]
								ON [SR].[RiskId] = [R].[Id] AND [R].[IsDeleted] = 0
								WHERE [SR].[Id] = [SSC].[LastSocialConflictSensibleRiskId] AND 
									  [R].[Id] = @SocialConflictSensibleRiskId AND
									  [SR].[IsDeleted] = 0) > 0
							  )
						GROUP BY [SSC].[Id], [T].[Id], [T].[Name])
					AS [B]
					GROUP BY [B].[Id], [B].[Name]
					ORDER BY [B].[Name]
				END
			END
		END
	END

END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_sector_meet_session]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_sector_meet_session]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_sector_meet_session]
@SectorMeetSessionId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS
BEGIN
	-- HEADER
	IF @Command = 'C'
	BEGIN
		SET LANGUAGE Spanish

		SELECT 
		ISNULL([MS].[Code], '') AS [MeetCode],
		ISNULL([MS].[MeetName], '') AS [MeetName],
		CONVERT(VARCHAR(10), [SMS].[CreationTime], 103) AS [CreationTime],
		CONVERT(VARCHAR(10), [SMS].[SessionTime], 103) AS [SessionTime],
		CONCAT(
			CONVERT(VARCHAR, CASE WHEN DATEPART(HOUR, [SMS].[SessionTime]) < 10 THEN '0' ELSE '' END), 
			CONVERT(VARCHAR, DATEPART(HOUR, [SMS].[SessionTime])),
			':',
			CONVERT(VARCHAR, CASE WHEN DATEPART(MINUTE, [SMS].[SessionTime]) < 10 THEN '0' ELSE '' END),
			CONVERT(VARCHAR, DATEPART(MINUTE, [SMS].[SessionTime])),
			' horas'
		) AS [SessionHour],
		ISNULL([SC].[Code], '') AS [SocialConflictCode],
		ISNULL([SC].[CaseName], '') AS [SocialConflictCaseName],
		ISNULL([TU].[Name], '') AS [TerritorialUnit],
		ISNULL([SMS].[Location], '') AS [Location],
		ISNULL([SMS].[Type], '') AS [SessionType],
		ISNULL([DE].[Name], '') AS [Department],
		ISNULL([PR].[Name], '') AS [Province],
		ISNULL([DI].[Name], '') AS [District],
		CASE WHEN [SMS].[PersonTime] IS NOT NULL THEN
		CONCAT(CONVERT(VARCHAR, CASE WHEN DAY([SMS].[PersonTime]) < 10 THEN '0' ELSE '' END),
		CONVERT(VARCHAR, DAY([SMS].[PersonTime])),
		' de ', 
		LOWER(DATENAME(MONTH, [SMS].[PersonTime])), 
		' de ',
		CONVERT(VARCHAR, YEAR([SMS].[PersonTime]))) ELSE '' END AS [ReportTime],
		ISNULL([SMS].[Side], '') AS [Side],
		ISNULL([PE].[Name], '') AS [Person]
		FROM [AppSectorMeetSessions] [SMS]
		INNER JOIN [AppSectorMeets] [MS]
		ON [MS].[Id] = [SMS].[SectorMeetId]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [MS].[SocialConflictId]
		LEFT JOIN [AppTerritorialUnits] [TU]
		ON [TU].[Id] = [MS].[TerritorialUnitId]
		LEFT JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [SMS].[DepartmentId]
		LEFT JOIN [AppProvinces] [PR]
		ON [PR].[Id] = [SMS].[ProvinceId]
		LEFT JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [SMS].[DistrictId]
		LEFT JOIN [AbpUsers] [US]
		ON [US].[Id] = @CreatorUserId
		LEFT JOIN [AppPersons] [PE]
		ON [PE].[Id] = [SMS].[PersonId]
		WHERE [SMS].[Id] = @SectorMeetSessionId
	END

	-- LEADERS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[SL].[Id] AS [Id],
		CASE 
			WHEN [SL].[Type] = 1 THEN ISNULL([DI].[Name], '')
			WHEN [SL].[Type] = 2 THEN ISNULL([DG].[Name], '')
			ELSE ISNULL([SL].[Role], '') END 
		AS [Name],
		[SL].[Entity] AS [Entity]
		FROM [AppSectorMeetSessionLeaders] [SL]
		LEFT JOIN [AppDirectoryGovernments] [DG]
		ON [DG].[Id] = [SL].[DirectoryGovernmentId]
		LEFT JOIN [AppDirectoryIndustries] [DI]
		ON [DI].[Id] = [SL].[DirectoryIndustryId]
		WHERE [SL].[SectorMeetSessionId] = @SectorMeetSessionId AND
			  [SL].[IsDeleted] = 0
		ORDER BY [SL].[Index]
	END

	-- TEAMS
	IF @Command = 'T'
	BEGIN
		SELECT 
		CONCAT(ISNULL([ST].[Name], ''), ' ', ISNULL([ST].[Surname], ''), ' ', ISNULL([ST].[SecondSurname], '')) AS [Name],
		ISNULL([ST].[Job], '') AS [Job]
		FROM [AppSectorMeetSessionTeams] [ST]
		WHERE [ST].[SectorMeetSessionLeaderId] = @SectorMeetSessionId AND
			  [ST].[IsDeleted] = 0
	END

	-- SCHEDULES
	IF @Command = 'S'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SS].[Index] ASC) AS [Index],
		ISNULL([SS].[Description], '') AS [Description]
		FROM [AppSectorMeetSessionSchedules] [SS]
		WHERE [SS].[SectorMeetSessionId] = @SectorMeetSessionId AND
			  [SS].[IsDeleted] = 0
		ORDER BY [SS].[Index]
	END

	-- AGREEMENTS
	IF @Command = 'A'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SA].[Index] ASC) AS [Index],
		ISNULL([SA].[Description], '') AS [Description]
		FROM [AppSectorMeetSessionAgreements] [SA]
		WHERE [SA].[SectorMeetSessionId] = @SectorMeetSessionId AND
			  [SA].[IsDeleted] = 0
		ORDER BY [SA].[Index]
	END

	-- CRITICAL ASPECTS
	IF @Command = 'R'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SCA].[Index] ASC) AS [Index],
		ISNULL([SCA].[Description], '') AS [Description]
		FROM [AppSectorMeetSessionCriticalAspects] [SCA]
		WHERE [SCA].[SectorMeetSessionId] = @SectorMeetSessionId AND
			  [SCA].[IsDeleted] = 0
	END

	-- ACTIONS
	IF @Command = 'O'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [SA].[Index] ASC) AS [Index],
		ISNULL([SA].[Description], '') AS [Description]
		FROM [AppSectorMeetSessionActions] [SA]
		WHERE [SA].[SectorMeetSessionId] = @SectorMeetSessionId AND
			  [SA].[IsDeleted] = 0
		ORDER BY [SA].[Index]
	END

	-- SUMMARIES
	IF @Command = 'M'
	BEGIN
		SELECT 
		[Id],
		[Leader]
		FROM (
			SELECT 
			CASE WHEN [SML].[Type] = 1 THEN ISNULL([SML].[Id], 0)
				 WHEN [SML].[Type] = 2 THEN ISNULL([SML].[Id], 0)
				 WHEN [SML].[Type] = 3 THEN ISNULL([SML].[Id], 0)
				 WHEN [SML].[Type] = 4 THEN ISNULL([SML].[Id], 0)
				 ELSE 0
				 END AS [Id],
			CONCAT(CASE WHEN [SML].[Type] = 1 --COMPANY
					THEN ISNULL([DI].[Name], '')
				 WHEN [SML].[Type] = 2 --GOVERMENT
					THEN ISNULL([DG].[Name], '')
				 WHEN [SML].[Type] = 3 --CIVIL SOCIETY
					THEN ISNULL([SML].[Role], '')
				 WHEN [SML].[Type] = 4 --OTHED
					THEN ISNULL([SML].[Role], '')
				ELSE 'Información adicional:'
				END,
			CASE WHEN [SML].[Type] = 1 --COMPANY
					THEN CONCAT(CASE WHEN [SML].[Entity] IS NOT NULL THEN CONCAT(' / ', LTRIM(RTRIM([SML].[Entity]))) ELSE '' END, ', informó lo siguiente')
				 WHEN [SML].[Type] = 2 --GOVERMENT
					THEN CONCAT(CASE WHEN [SML].[Entity] IS NOT NULL THEN CONCAT(' / ', LTRIM(RTRIM([SML].[Entity]))) ELSE '' END, ', informó lo siguiente')
				 WHEN [SML].[Type] = 3 --CIVIL SOCIETY
					THEN ', informó lo siguiente'
				 WHEN [SML].[Type] = 4 --OTHED
					THEN ', informó lo siguiente'
				ELSE ''
				END) AS [Leader]
			FROM [AppSectorMeetSessionSummaries] [SMS]
			LEFT JOIN [AppSectorMeetSessionLeaders] [SML]
			ON [SML].[Id] = [SMS].[SectorMeetSessionLeaderId]
			LEFT JOIN [AppDirectoryIndustries] [DI]
			ON [DI].[Id] = [SML].[DirectoryIndustryId]
			LEFT JOIN [AppDirectoryGovernments] [DG]
			ON [DG].[Id] = [SML].[DirectoryGovernmentId]
			WHERE [SMS].[SectorMeetSessionId] = @SectorMeetSessionId AND
				  (CASE WHEN [SML].[Type] = 1 THEN ISNULL([DI].[Id], 0) ELSE 1 END) <> 0 AND --COMPANY
				  (CASE WHEN [SML].[Type] = 2 THEN ISNULL([DG].[Id], 0) ELSE 1 END) <> 0 AND --GOVERMENT
				  [SMS].[IsDeleted] = 0) AS [A]
			GROUP BY [A].[Id], [A].[Leader]
			ORDER BY [A].[Id] DESC
	END

	-- SUMMARIES
	IF @Command = 'N'
	BEGIN
		SELECT 
		[SMS].[Description] AS [Description]
		FROM [AppSectorMeetSessionSummaries] [SMS]
		WHERE @SectorMeetSessionId = ISNULL([SMS].[SectorMeetSessionLeaderId], 0) AND
			  [SMS].[IsDeleted] = 0
	END
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict_alert_resume]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict_alert_resume]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict_alert_resume]
@SocialConflictAlertId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS
BEGIN
	-- CABECERA
	IF @Command = 'C'
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), [A].[AlertTime], 103) AS [AlertTime],
		[A].[Code] AS [AlertCode],
		[A].[Description] AS [AlertCaseName],
		CASE WHEN [A].[SocialConflictId] IS NOT NULL AND [C].[IsDeleted] = 0 
			THEN CONCAT(ISNULL([C].[Code], ''), ' - ', ISNULL([C].[CaseName], ''))
			ELSE '' END AS [SocialConflict],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictAlertLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictAlertId] = [A].[Id] AND
			  [L].[IsDeleted] = 0 AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		ISNULL(STUFF((SELECT '; ' + LTRIM(RTRIM([P].[Name])) 
		FROM [AppPersons] [P] 
		INNER JOIN [AppTerritorialUnitCoordinators] [PT]
		ON [PT].[PersonId] = [P].[Id]
		INNER JOIN AppSocialConflictAlertLocations [L]
		ON [L].[TerritorialUnitId] = [PT].[TerritorialUnitId]
		INNER JOIN AppTerritorialUnits [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictAlertId] = [A].[Id] AND
			  [L].[IsDeleted] = 0 AND
			  [T].[IsDeleted] = 0 AND 
			  [P].[IsDeleted] = 0 AND 
			  [P].[Type]      = 1
		GROUP BY [P].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Coordinators],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0 
			THEN [ARI].[Description] ELSE '' END AS [RiskDescription],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0  
			THEN [RI].[Name] ELSE '' END AS [RiskName],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [ARI].[IsDeleted] = 0 AND [RI].[IsDeleted] = 0  
			THEN [RI].[Color] ELSE '' END AS [RiskColor],
		[A].[Actions] AS [Actions]
		FROM [AppSocialConflictAlerts] [A]
		LEFT JOIN AppSocialConflicts [C]
		ON [C].[Id] = [A].[SocialConflictId]
		LEFT JOIN AppSocialConflictAlertRisks [ARI]
		ON [ARI].[Id] = [A].[LastAlertRiskId]
		LEFT JOIN AppAlertRisks [RI]
		ON [RI].[Id]  = [ARI].[AlertRiskId]
		WHERE [A].[Id]          = @SocialConflictAlertId AND
		      [A].[IsDeleted]   = 0                      AND 
			  [RI].[IsDeleted]  = 0                      AND 
			  [ARI].[IsDeleted] = 0
	END

	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictAlertLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [L].[IsDeleted]             = 0 AND
			  [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [L].[SocialConflictAlertId] = @SocialConflictAlertId 
	END
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict]
@SocialConflictId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS
BEGIN
	--HEADER
	IF @Command = 'C'
	BEGIN
		SET LANGUAGE Spanish
		SELECT 
		CONVERT(VARCHAR(10), [SC].[CreationTime], 103) AS [CreationTime],
		CONCAT(CONVERT(VARCHAR, CASE WHEN DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])) < 10 THEN '0' ELSE '' END),
		CONVERT(VARCHAR, DAY(ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))),
		' de ', 
		LOWER(DATENAME(MONTH, ISNULL([SC].[LastModificationTime], [SC].[CreationTime]))), 
		' de ',
		CONVERT(VARCHAR, YEAR(ISNULL([SC].[LastModificationTime], [SC].[CreationTime])))) AS [LastModificationTime],
		[SC].[Code] AS [CaseCode],
		UPPER([SC].[CaseName]) AS [CaseName],
		ISNULL([SC].[Problem], '') AS [Problem],
		ISNULL([SC].[Plaint], '') AS [Plaint],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictId] = [SC].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0 
			THEN ISNULL([SCR].[Description], '') ELSE '' END AS [RiskDescription],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Name], '') ELSE 'Ninguno' END AS [RiskName],
		CASE WHEN [SC].[LastSocialConflictRiskId] IS NOT NULL AND [SCRI].[IsDeleted] = 0 AND [SCR].[IsDeleted] = 0  
			THEN ISNULL([SCRI].[Color], '') ELSE '#787878' END AS [RiskColor],
		[SC].[LastCondition] AS [ConditionType],
		CASE WHEN [SC].[LastCondition] = 1 THEN 'Activo'
			 WHEN [SC].[LastCondition] = 2 THEN 'Inactivo'
			 ELSE 'Ninguno' END [ConditionName],
		CASE WHEN [SC].[LastCondition] = 1 THEN '#00B050'
			 WHEN [SC].[LastCondition] = 2 THEN '#FF0000'
			 ELSE '#787878' END [ConditionColor],
		ISNULL([STS].[Opened], 0) AS [Opened],
		ISNULL([STS].[Closed], 0) AS [Closed],
		ISNULL([STS].[Pip], 0) AS [Pip],
		ISNULL([STS].[Activities], 0) AS [Activities],
		ISNULL([STS].[ResponsibleCount], 0) AS [ResponsibleCount],
		(SELECT ISNULL(UserName, '') FROM [AbpUsers] WHERE [Id] = @CreatorUserId) AS [UserName],
		ISNULL([TP].[Name], '') AS [Typology],
		ISNULL([STP].[Name], '') AS [SubTypology],
		CASE WHEN [SC].[GeographicType] = 0 THEN 1 ELSE [SC].[GeographicType] END AS [GeographycType],

		ISNULL([CO].[Name], '') AS [Coordinator],
		ISNULL([RES].[Name], '') AS [Responsible],
		ISNULL([SEC].[Name], '') AS [ResponsibleSector],
		(CASE WHEN [SC].[GovernmentLevel] = 1 THEN 'Local' 
			  WHEN [SC].[GovernmentLevel] = 2 THEN 'Regional'
			  WHEN [SC].[GovernmentLevel] = 3 THEN 'Nacional'
			  ELSE '' END) AS [GovernmentLevel],
		CASE WHEN [STA].[StateTime] IS NOT NULL THEN CONVERT(VARCHAR(10), [STA].[StateTime], 103) ELSE '' END AS [StateTime],
		ISNULL([STA].[State], '') AS [StateCurrent],
		ISNULL([STA].[Description], '') AS [StateDescription]
		FROM [AppSocialConflicts] [SC]
		LEFT JOIN [AppSocialConflictRisks] [SCR]
		ON [SCR].[Id] = [SC].[LastSocialConflictRiskId]
		LEFT JOIN [AppRisks] [SCRI]
		ON [SCRI].[Id] = [SCR].[RiskId]
		LEFT JOIN (SELECT 
			@SocialConflictId AS [Id],
			SUM(CASE WHEN [P].[Value] LIKE '%Abierto%' THEN 1 ELSE 0 END) AS [Opened],
			SUM(CASE WHEN [P].[Value] LIKE '%Cerrado%' THEN 1 ELSE 0 END) AS [Closed],
			SUM(CASE WHEN [C].[Type] = 1 THEN 1 ELSE 0 END) AS [Pip],
			SUM(CASE WHEN [C].[Type] IN (0, 2) THEN 1 ELSE 0 END) AS [Activities],
			COUNT(*) AS [ResponsibleCount]
			FROM [AppSocialConflicts] [S]
			INNER JOIN [AppRecords] [R]
			ON [R].[SocialConflictId] = [S].[Id]
			INNER JOIN [AppCompromises] [C]
			ON [C].[RecordId] = [R].[Id]
			INNER JOIN [AppParameter] [P]
			ON [P].[Id] = [C].[StatusId]
			WHERE [S].[Id] = @SocialConflictId AND
				  [S].[IsDeleted] = 0 AND
				  [R].[IsDeleted] = 0 AND
				  [C].[IsDeleted] = 0
			GROUP BY [S].[Id]) AS [STS]
		ON [STS].[Id] = [SC].[Id]
		LEFT JOIN [AppTypologies] [TP]
		ON [TP].[Id] = [SC].[TypologyId]
		LEFT JOIN [AppSubTypologies] [STP]
		ON [STP].[Id] = [SC].[SubTypologyId]
		LEFT JOIN [AppPersons] [CO]
		ON [CO].[Id] = [SC].[CoordinatorId]
		LEFT JOIN [AppPersons] [RES]
		ON [RES].[Id] = [SC].[ManagerId]
		LEFT JOIN [AppSectors] [SEC]
		ON [SEC].[Id] = [SC].[SectorId]
		LEFT JOIN [AppSocialConflictStates] [STA]
		ON [STA].[Id] = [SC].[LastSocialConflictStateId]
		WHERE [SC].[Id] = @SocialConflictId
	END

	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId]
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId]
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId]
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [DE].[IsDeleted]            = 0 AND
			  [P].[IsDeleted]             = 0 AND
			  [DI].[IsDeleted]            = 0 AND 
			  ISNULL([R].[IsDeleted], 0)  = 0 AND
			  [L].[SocialConflictId] = @SocialConflictId
	END

	--FACTS 
	IF @Command = 'F'
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), [VF].[StartTime], 103) AS [CreationTime],
		ISNULL([VF].[Description], '') AS [Description],
		ISNULL([F].[Name], '') AS [Type],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([D].[Name])) 
		FROM [AppSocialConflictViolenceFactLocations] [L] 
		INNER JOIN [AppDepartments] [D]
		ON [D].[Id] = [L].[DepartmentId]
		WHERE [L].[SocialConflictViolenceFactId] = [VF].[Id] AND
			  [D].[IsDeleted] = 0
		GROUP BY [D].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Departments],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([P].[Name])) 
		FROM [AppSocialConflictViolenceFactLocations] [L] 
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id] = [L].[ProvinceId]
		WHERE [L].[SocialConflictViolenceFactId] = [VF].[Id] AND
			  [P].[IsDeleted] = 0
		GROUP BY [P].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Provinces],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([D].[Name])) 
		FROM [AppSocialConflictViolenceFactLocations] [L] 
		INNER JOIN [AppDistricts] [D]
		ON [D].[Id] = [L].[DistrictId]
		WHERE [L].[SocialConflictViolenceFactId] = [VF].[Id] AND
			  [D].[IsDeleted] = 0
		GROUP BY [D].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Districts],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([R].[Name])) 
		FROM [AppSocialConflictViolenceFactLocations] [L] 
		INNER JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId]
		WHERE [L].[SocialConflictViolenceFactId] = [VF].[Id] AND
			  [L].[RegionId] IS NOT NULL AND
			  [R].[IsDeleted] = 0 
		GROUP BY [R].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Regions],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([L].[Ubication])) 
		FROM [AppSocialConflictViolenceFactLocations] [L] 
		WHERE [L].[SocialConflictViolenceFactId] = [VF].[Id] AND
			  [L].[IsDeleted] = 0 AND
			  [L].[Ubication] IS NOT NULL AND 
			  LTRIM(RTRIM([L].[Ubication])) != ''
		GROUP BY [L].[Ubication]
		FOR XML PATH('')) ,1 , 2,''), '') AS [Locations]
		FROM [AppSocialConflictViolenceFacts] [VF]
		INNER JOIN [AppFacts] [F]
		ON [F].[Id] = [VF].[FactId]
		WHERE [VF].[SocialConflictId] = @SocialConflictId AND
			  [VF].[IsDeleted] = 0 AND
			  [F].[IsDeleted]  = 0
		ORDER BY [VF].[StartTime] ASC
 	END

	-- ACTORS
	IF @Command = 'A'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [AC].[Id] DESC) AS [Row],
		ISNULL([AC].[Name], '') AS [Name],
		ISNULL([AC].[Document], '') AS [Document],
		ISNULL([AC].[Job], '') AS [Job],
		ISNULL([AC].[Community], '') AS [Community],
		CASE WHEN [AC].[IsPoliticalAssociation] = 1 THEN ISNULL([AC].[PoliticalAssociation], '') ELSE '' END AS [PoliticalAssociation],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 
			THEN [AT].[Name] ELSE '' END [Type],
		CASE WHEN [AC].[ActorMovementId] IS NOT NULL AND [AM].[IsDeleted] = 0 AND
				  [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0     AND
				  [AT].[ShowMovement] = 1
			THEN [AM].[Name] ELSE '' END [Movement],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Position], '') ELSE '' END [Position],
		CASE WHEN [AC].[ActorTypeId] IS NOT NULL AND [AT].[IsDeleted] = 0 AND [AT].[ShowDetail] = 1
			THEN ISNULL([AC].[Interest], '') ELSE '' END [Interest]
		FROM [AppSocialConflictActors] [AC]
		INNER JOIN [AppSocialConflicts] [SC]
		ON [SC].[Id] = [AC].[SocialConflictId] 
		LEFT JOIN [AppActorTypes] [AT]
		ON [AT].[Id] = [AC].[ActorTypeId] 
		LEFT JOIN [AppActorMovements] [AM]
		ON [AM].[Id] = [AC].[ActorMovementId] 
		WHERE [AC].[IsDeleted] = 0 AND
			  [SC].[IsDeleted] = 0 AND
			  [SC].[Id]        = @SocialConflictId
	END

	-- COMPROMISES
	IF @Command = 'P'
	BEGIN
		SELECT 
		ROW_NUMBER() OVER(ORDER BY [A].[Id] DESC) AS [CaseRow],
		CONVERT(VARCHAR(10), [A].[AlertTime], 103) AS [CaseTime],
		ISNULL([A].[Code], '') AS [CaseCode],
		ISNULL([A].[Description], '') AS [CaseName],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [AR].[IsDeleted] = 0 AND [R].[IsDeleted] = 0 
			THEN [AR].[Description] ELSE '' END AS [RiskDescription],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [AR].[IsDeleted] = 0 AND [R].[IsDeleted] = 0  
			THEN [R].[Name] ELSE '' END AS [RiskName],
		CASE WHEN [A].[LastAlertRiskId] IS NOT NULL AND [AR].[IsDeleted] = 0 AND [R].[IsDeleted] = 0  
			THEN [R].[Color] ELSE '' END AS [RiskColor]
		FROM [AppSocialConflictAlerts] [A]
		LEFT JOIN [AppSocialConflictAlertRisks] [AR]
		ON [AR].[Id] = [A].[LastAlertRiskId] AND [AR].[SocialConflictAlertId] = [A].[Id]
		LEFT JOIN [AppAlertRisks] [R]
		ON [R].[Id] = [AR].[AlertRiskId]
		WHERE [A].[SocialConflictId] = @SocialConflictId AND
			  [A].[IsDeleted] = 0
	END

	--RESPONSIBLES 
	IF @Command = 'R'
	BEGIN
		SELECT 
			UPPER([RE].[Name]) AS [Name],
			COUNT(*) AS [Count]
		FROM [AppSocialConflicts] [SC]
		INNER JOIN [AppRecords] [RC]
		ON [RC].[SocialConflictId] = [SC].[Id]
		INNER JOIN [AppCompromises] [CP]
		ON [CP].[RecordId] = [RC].[Id]
		INNER JOIN [AppResponsibleActors] [RE]
		ON [RE].[Id] = [CP].[ResponsibleActorId]
		WHERE [SC].[Id] = @SocialConflictId AND
			  [SC].[IsDeleted] = 0 AND
			  [RC].[IsDeleted] = 0 AND
			  [CP].[IsDeleted] = 0 AND
			  [RE].[IsDeleted] = 0 AND
			  [RE].[IsDeleted] = 0
		GROUP BY [RE].[Id], [RE].[Name]
		ORDER BY 2
	END
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[report_social_conflict_sensible]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[report_social_conflict_sensible]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[report_social_conflict_sensible]
@SocialConflictSensibleId INT, @CreatorUserId BIGINT, @Command VARCHAR(1)
AS
BEGIN
	
	--HEADER
	IF @Command = 'C'
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), [CS].[CreationTime], 103) AS [CreationTime],
		ISNULL([CS].[Code], '') AS [CaseCode],
		ISNULL([CS].[CaseName], '') AS [CaseName],
		ISNULL([TY].[Name], '') AS [Typology],
		ISNULL([MA].[Name], '') AS [Manager],
		ISNULL([CO].[Name], '') AS [Coordinator],
		ISNULL([AN].[Name], '') AS [Analyst],
		ISNULL(STUFF((SELECT ', ' + LTRIM(RTRIM([T].[Name])) 
		FROM [AppSocialConflictSensibleLocations] [L] 
		INNER JOIN [AppTerritorialUnits] [T]
		ON [T].[Id] = [L].[TerritorialUnitId]
		WHERE [L].[SocialConflictSensibleId] = [CS].[Id] AND
			  [T].[IsDeleted] = 0
		GROUP BY [T].[Name]
		FOR XML PATH('')) ,1 , 2,''), '') AS [TerritorialUnits],
		CASE WHEN [CS].[GeographicType] = 0 THEN 1 ELSE [CS].[GeographicType] END AS [GeographycType],
		[CS].[LastCondition] AS [ConditionType],
		CASE WHEN [CS].[LastCondition] = 1 THEN 'Activo'
			 WHEN [CS].[LastCondition] = 2 THEN 'Inactivo'
			 ELSE 'Ninguno' END [ConditionName],
		CASE WHEN [CS].[LastCondition] = 1 THEN '#00B050'
			 WHEN [CS].[LastCondition] = 2 THEN '#FF0000'
			 ELSE '#787878' END [ConditionColor],
		CASE WHEN [CS].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [R].[IsDeleted] = 0 AND [CSR].[IsDeleted] = 0 
			THEN ISNULL([CSR].[Description], '') ELSE '' END AS [RiskDescription],
		CASE WHEN [CS].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [R].[IsDeleted] = 0 AND [CSR].[IsDeleted] = 0  
			THEN ISNULL([R].[Name], '') ELSE 'Ninguno' END AS [RiskName],
		CASE WHEN [CS].[LastSocialConflictSensibleRiskId] IS NOT NULL AND [R].[IsDeleted] = 0 AND [CSR].[IsDeleted] = 0  
			THEN ISNULL([R].[Color], '') ELSE '#787878' END AS [RiskColor],
		ISNULL([CS].[Problem], '') AS [Problem],
		CASE WHEN [CSM].[IsDeleted] = 0 AND [M].[IsDeleted] = 0 THEN CONVERT(VARCHAR(10), [CSM].[ManagementTime], 103) ELSE '' END AS [ManagementTime],
		CASE WHEN [CSM].[IsDeleted] = 0 AND [M].[IsDeleted] = 0 THEN ISNULL([M].[Name], '') ELSE '' END AS [ManagementName],
		CASE WHEN [CSM].[IsDeleted] = 0 AND [M].[IsDeleted] = 0 THEN ISNULL([CSM].[Description], '') ELSE '' END AS [ManagementDescription],
		CASE WHEN [CSS].[StateTime] IS NOT NULL THEN CONVERT(VARCHAR(10), [CSS].[StateTime], 103) ELSE '' END AS [StateTime],
		ISNULL([CSS].[State], '') AS [StateCurrent],
		ISNULL([CSS].[Description], '') AS [StateDescription]
		FROM [AppSocialConflictSensibles] [CS]
		LEFT JOIN [AppTypologies] [TY]
		ON [TY].[Id] = [CS].[TypologyId] AND [TY].[IsDeleted] = 0
		LEFT JOIN [AppPersons] [MA]
		ON [MA].[Id] = [CS].[ManagerId] AND [MA].[IsDeleted] = 0
		LEFT JOIN [AppPersons] [CO]
		ON [CO].[Id] = [CS].[CoordinatorId] AND [CO].[IsDeleted] = 0
		LEFT JOIN [AppPersons] [AN]
		ON [AN].[Id] = [CS].[AnalystId] AND [AN].[IsDeleted] = 0
		LEFT JOIN [AppSocialConflictSensibleRisks] [CSR]
		ON [CSR].[Id] = [CS].[LastSocialConflictSensibleRiskId] AND [CSR].[IsDeleted] = 0
		LEFT JOIN [AppRisks] [R]
		ON [R].[Id] = [CSR].[RiskId] AND [R].[IsDeleted] = 0
		LEFT JOIN [AppSocialConflictSensibleStates] [CSS]
		ON [CSS].[Id] = [CS].[LastSocialConflictSensibleStateId] AND [CSS].[IsDeleted] = 0
		LEFT JOIN [AppSocialConflictSensibleManagements] [CSM]
		ON [CSM].[Id] = [CS].[LastSocialConflictSensibleManagementId] AND [CSM].[IsDeleted] = 0
		LEFT JOIN [AppManagements] [M]
		ON [M].[Id] = [CSM].[ManagementId] AND [M].[IsDeleted] = 0
		WHERE [CS].[IsDeleted] = 0 AND
			  [CS].[Id] = @SocialConflictSensibleId
	END

	-- LOCATIONS
	IF @Command = 'L'
	BEGIN
		SELECT 
		[DE].[Name] AS [Department],
		[P].[Name] AS [Province],
		[DI].[Name] AS [District],
		ISNULL([R].[Name], '') AS [Region],
		ISNULL([L].[Ubication], '') AS [Ubication]
		FROM [AppSocialConflictSensibleLocations] [L]
		INNER JOIN [AppDepartments] [DE]
		ON [DE].[Id] = [L].[DepartmentId] AND [DE].[IsDeleted] = 0
		INNER JOIN [AppProvinces] [P]
		ON [P].[Id]  = [L].[ProvinceId] AND [P].[IsDeleted] = 0
		INNER JOIN [AppDistricts] [DI]
		ON [DI].[Id] = [L].[DistrictId] AND [DI].[IsDeleted] = 0
		LEFT JOIN [AppRegions] [R]
		ON [R].[Id] = [L].[RegionId] AND [R].[IsDeleted] = 0
		WHERE [L].[SocialConflictSensibleId] = @SocialConflictSensibleId
	END

END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dialog_space_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[dialog_space_code]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[dialog_space_code]
@DialogSpaceId INT
AS
BEGIN
	DECLARE @DATE DATETIME = GETDATE(), @YEAR INT

	SET @YEAR = YEAR(GETDATE())

	UPDATE [DS]
	SET [DS].[Year]  = @YEAR,
		[DS].[Generation] = 1,
		[DS].[Count] = (SELECT ISNULL(MAX([Count]), 0) + 1 FROM [AppDialogSpaces] WHERE [Year] = @YEAR)
	FROM [AppDialogSpaces] [DS]
	WHERE [Id] = @DialogSpaceId AND 
	      [Generation] = 0

	UPDATE [DS]
	SET [DS].[Code] =  CASE WHEN [DS].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), [DS].[Count]) + ' - ' + CONVERT(VARCHAR(4), [DS].[Year])
	FROM [AppDialogSpaces] [DS]
	WHERE [Id] = @DialogSpaceId AND 
	      [Generation] = 1
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dialog_space_code_replace]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[dialog_space_code_replace]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[dialog_space_code_replace]
@DialogSpaceId INT, @Year INT, @Count INT
AS
BEGIN
	UPDATE A
	SET [A].[Year]  = @Year,
		[A].[Generation] = 1,
		[A].[Count] = @Count,
		[A].[Code] =  CASE WHEN [A].[Count] < 10 THEN '0' ELSE '' END + CONVERT(VARCHAR(11), @Count) + ' - ' + CONVERT(VARCHAR(4), @Year)
	FROM [AppDialogSpaces] A
	WHERE [Id] = @DialogSpaceId
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dialog_space_state]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[dialog_space_state]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[dialog_space_state]
@DialogSpaceId INT
AS
BEGIN
	UPDATE [DS] SET 
	[DS].[LastDialogSpaceDocumentId] = (SELECT TOP 1 [DD].[Id]
		FROM [AppDialogSpaceDocuments]  [DD]
		WHERE [DD].[IsDeleted] = 0 AND
			  [DD].[DialogSpaceId] = [DS].[Id]
		ORDER BY [DD].[InstallationTime] ASC, [DD].[CreationTime] DESC)	
	FROM [AppDialogSpaces] [DS]
	WHERE [DS].[Id] = @DialogSpaceId
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[record_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[record_code]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[record_code]
@SocialConflictId INT, @RecordId BIGINT
AS
BEGIN

	UPDATE [R]
	SET [R].[Code] = (
	SELECT 
		CONCAT('A',
		CASE WHEN [A].[Code] < 10 THEN '00'
			 WHEN [A].[Code] >= 10 AND [A].[Code] < 100 THEN '0'
			 ELSE '' END,
		[A].[Code])
	FROM (SELECT  
			 ISNULL(MAX(CONVERT(INT, REPLACE([Code], 'A', ''))), 0) + 1 AS [Code] 
		  FROM [AppRecords]
		  WHERE [SocialConflictId] = @SocialConflictId AND
				[IsDeleted] = 0) 
	AS A) 
	FROM [AppRecords] [R]
	WHERE [Id] = @RecordId
END");

            _context.Database.ExecuteSqlRaw(@"
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[compromise_code]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[compromise_code]
END");

            _context.Database.ExecuteSqlRaw(@"
CREATE PROCEDURE [dbo].[compromise_code]
@CompromiseId BIGINT
AS
BEGIN

	UPDATE [C]
	SET [C].[Code] = (
	SELECT 
		CONCAT('C',
		CASE WHEN [A].[Code] < 10 THEN '00'
			 WHEN [A].[Code] >= 10 AND [A].[Code] < 100 THEN '0'
			 ELSE '' END,
		[A].[Code])
	FROM (SELECT  
			 ISNULL(MAX(CONVERT(INT, REPLACE([Code], 'C', ''))), 0) + 1 AS [Code] 
		  FROM [AppCompromises]
		  WHERE [RecordId] = [C].[RecordId] AND
				[IsDeleted] = 0) 
	AS A) 
	FROM [AppCompromises] [C]
	WHERE [C].[Id] = @CompromiseId
END");

        }
    }
}
