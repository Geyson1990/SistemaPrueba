// <auto-generated />
using System;
using Contable.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Contable.Migrations
{
    [DbContext(typeof(ContableDbContext))]
    [Migration("20220824001008_add-crisis-committee-complete")]
    partial class addcrisiscommitteecomplete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Application.Services.Dto.EntityDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("EntityDtos");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParameterName", "TenantId")
                        .IsUnique()
                        .HasFilter("[ParameterName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicParameters");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DynamicParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicParameterId");

                    b.ToTable("AbpDynamicParameterValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DynamicParameterId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicParameterId");

                    b.HasIndex("EntityFullName", "DynamicParameterId", "TenantId")
                        .IsUnique()
                        .HasFilter("[EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpEntityDynamicParameters");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityDynamicParameterId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityDynamicParameterId");

                    b.ToTable("AbpEntityDynamicParameterValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(48)")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasColumnType("nvarchar(192)")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasColumnType("nvarchar(192)")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenantIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(95)")
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions");
                });

            modelBuilder.Entity("Contable.Application.ActorMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppActorMovements");
                });

            modelBuilder.Entity("Contable.Application.ActorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("ShowDetail")
                        .HasColumnType("BIT");

                    b.Property<bool>("ShowMovement")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppActorTypes");
                });

            modelBuilder.Entity("Contable.Application.AlertDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppAlertDemands");
                });

            modelBuilder.Entity("Contable.Application.AlertResponsible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("ShortName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("Tracing")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppAlertResponsibles");
                });

            modelBuilder.Entity("Contable.Application.AlertRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppAlertRisks");
                });

            modelBuilder.Entity("Contable.Application.AlertSeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppAlertSeals");
                });

            modelBuilder.Entity("Contable.Application.AlertSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppAlertSectors");
                });

            modelBuilder.Entity("Contable.Application.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskManagementId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagementId");

                    b.HasIndex("UserId");

                    b.ToTable("AppComments");
                });

            modelBuilder.Entity("Contable.Application.Compromise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<long?>("PIPMEFId")
                        .HasColumnType("bigint");

                    b.Property<string>("PriorityReference")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ResponsibleActorId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsibleSubActorId")
                        .HasColumnType("int");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Transcription")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("PIPMEFId");

                    b.HasIndex("RecordId");

                    b.HasIndex("ResponsibleActorId");

                    b.HasIndex("ResponsibleSubActorId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("StatusId");

                    b.ToTable("AppCompromises");
                });

            modelBuilder.Entity("Contable.Application.CompromiseInvolved", b =>
                {
                    b.Property<long>("CompromiseId")
                        .HasColumnType("bigint");

                    b.Property<int>("ResponsibleActorId")
                        .HasColumnType("int");

                    b.HasKey("CompromiseId", "ResponsibleActorId");

                    b.HasIndex("ResponsibleActorId");

                    b.ToTable("AppCompromiseInvolved");
                });

            modelBuilder.Entity("Contable.Application.CompromiseLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompromiseId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SocialConflictLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompromiseId");

                    b.HasIndex("SocialConflictLocationId");

                    b.ToTable("AppCompromiseLocations");
                });

            modelBuilder.Entity("Contable.Application.CompromiseTimeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("DATETIME");

                    b.Property<long>("CompromiseId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MilestoneId")
                        .HasColumnType("INT");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("ProyectedTime")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CompromiseId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("PhaseId");

                    b.ToTable("AppCompromiseTimeLines");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseName")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CrisisCommitteeTime")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppCrisisCommittees");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteeActions");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteeAgreements");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteeChannels");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppCrisisCommitteeJobs");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteeMessage");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteePlans");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectoryGovernmentId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.HasIndex("DirectoryGovernmentId");

                    b.ToTable("AppCrisisCommitteeSectors");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CrisisCommitteeId");

                    b.ToTable("AppCrisisCommitteeTasks");
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertResponsibleId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrisisCommitteeId")
                        .HasColumnType("INT");

                    b.Property<int>("CrisisCommitteeJobId")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Surname")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlertResponsibleId");

                    b.HasIndex("CrisisCommitteeId");

                    b.HasIndex("CrisisCommitteeJobId");

                    b.ToTable("AppCrisisCommitteeTeams");
                });

            modelBuilder.Entity("Contable.Application.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDepartments");
                });

            modelBuilder.Entity("Contable.Application.DinamicVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.ToTable("AppDinamicVariables");
                });

            modelBuilder.Entity("Contable.Application.DinamicVariableDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DinamicVariableId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("DinamicVariableId", "ProvinceId");

                    b.ToTable("AppDinamicVariableDetails");
                });

            modelBuilder.Entity("Contable.Application.DirectoryConflictType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDirectoryConflictTypes");
                });

            modelBuilder.Entity("Contable.Application.DirectoryDialog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectoryGovernmentId")
                        .HasColumnType("INT");

                    b.Property<int>("DirectoryResponsibleId")
                        .HasColumnType("INT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<string>("FirstSurname")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryGovernmentId");

                    b.HasIndex("DirectoryResponsibleId");

                    b.ToTable("AppDirectoryDialogs");
                });

            modelBuilder.Entity("Contable.Application.DirectoryGovernment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Alias")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectoryGovernmentSectorId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("ShortName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Url")
                        .HasColumnType("VARCHAR(300)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryGovernmentSectorId");

                    b.HasIndex("DistrictId");

                    b.ToTable("AppDirectoryGovernments");
                });

            modelBuilder.Entity("Contable.Application.DirectoryGovernmentLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDirectoryGovernmentLevels");
                });

            modelBuilder.Entity("Contable.Application.DirectoryGovernmentSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDirectoryGovernmentSectors");
                });

            modelBuilder.Entity("Contable.Application.DirectoryIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectorySectorId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<string>("Url")
                        .HasColumnType("VARCHAR(150)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorySectorId");

                    b.HasIndex("DistrictId");

                    b.ToTable("AppDirectoryIndustries");
                });

            modelBuilder.Entity("Contable.Application.DirectoryResponsible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDirectoryResponsibles");
                });

            modelBuilder.Entity("Contable.Application.DirectorySector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppDirectorySectors");
                });

            modelBuilder.Entity("Contable.Application.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Ubigeo")
                        .HasColumnType("VARCHAR(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AppDistricts");
                });

            modelBuilder.Entity("Contable.Application.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppFacts");
                });

            modelBuilder.Entity("Contable.Application.HelpMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectoryGovernmentId")
                        .HasColumnType("INT");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Request")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryGovernmentId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppHelpMemories");
                });

            modelBuilder.Entity("Contable.Application.HelpMemoryResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("HelpMemoryId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("HelpMemoryId");

                    b.ToTable("AppHelpMemoryResources");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseName")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("InterventionPlanTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INT");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppInterventionPlans");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppInterventionPlanActivities");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorMovementId")
                        .HasColumnType("INT");

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("INT");

                    b.Property<string>("Community")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("Imported")
                        .HasColumnType("BIT");

                    b.Property<int>("ImportedId")
                        .HasColumnType("INT");

                    b.Property<string>("Interest")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoliticalAssociation")
                        .HasColumnType("BIT");

                    b.Property<string>("Job")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PoliticalAssociation")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Position")
                        .HasColumnType("VARCHAR(3000)");

                    b.HasKey("Id");

                    b.HasIndex("ActorMovementId");

                    b.HasIndex("ActorTypeId");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppInterventionPlanActors");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.ToTable("AppInterventionPlanEntities");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INT");

                    b.Property<int>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.Property<string>("Ubication")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("InterventionPlanId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppInterventionPlanLocations");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanMethodology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanOptionId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Methodology")
                        .HasColumnType("VARCHAR(5000)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.HasIndex("InterventionPlanOptionId");

                    b.ToTable("AppInteventionPlanMethodologies");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppInterventionPlanObjectives");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppInterventionPlanOptions");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RiskId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.HasIndex("RiskId");

                    b.ToTable("AppInterventionPlanRisks");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppInterventionPlanRoles");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int?>("AlertResponsibleId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DirectoryGovernmentId")
                        .HasColumnType("INT");

                    b.Property<string>("Entity")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanActivityId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanEntityId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Schedule")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("AlertResponsibleId");

                    b.HasIndex("DirectoryGovernmentId");

                    b.HasIndex("InterventionPlanActivityId");

                    b.HasIndex("InterventionPlanEntityId");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppInterventionPlanSchedules");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppInterventionPlanSolutions");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InterventionPlanId");

                    b.ToTable("AppInterventionPlanStates");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlertResponsibleId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DirectoryGovernmentId")
                        .HasColumnType("INT");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("Entity")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int>("InterventionPlanEntityId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanId")
                        .HasColumnType("INT");

                    b.Property<int>("InterventionPlanRoleId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Role")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Surname")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlertResponsibleId");

                    b.HasIndex("DirectoryGovernmentId");

                    b.HasIndex("InterventionPlanEntityId");

                    b.HasIndex("InterventionPlanId");

                    b.HasIndex("InterventionPlanRoleId");

                    b.ToTable("AppInterventionPlanTeams");
                });

            modelBuilder.Entity("Contable.Application.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<decimal>("Max")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Min")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.ToTable("AppLevels");
                });

            modelBuilder.Entity("Contable.Application.Management", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("ShowDetail")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("AppManagements");
                });

            modelBuilder.Entity("Contable.Application.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("PIPMEFId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Responsible")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("int");

                    b.Property<int?>("TerritorialUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PIPMEFId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppOrders");
                });

            modelBuilder.Entity("Contable.Application.PIPMEF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Accrued")
                        .HasColumnType("NUMERIC(27,2)");

                    b.Property<decimal>("AccumulatedAccrued")
                        .HasColumnType("NUMERIC(27,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutingUnit")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("FormulatingUnit")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOk")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdateMEF")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("PIA")
                        .HasColumnType("NUMERIC(27,2)");

                    b.Property<decimal>("PIM")
                        .HasColumnType("NUMERIC(27,2)");

                    b.Property<int?>("PIPMilestoneId")
                        .HasColumnType("int");

                    b.Property<int?>("PIPPhaseId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("SNIPCode")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("UnifiedCode")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<decimal>("UpdatedCost")
                        .HasColumnType("NUMERIC(27,2)");

                    b.Property<string>("ViabilityDate")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.HasIndex("PIPMilestoneId");

                    b.HasIndex("PIPPhaseId");

                    b.ToTable("AppPIPMEF");
                });

            modelBuilder.Entity("Contable.Application.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("INT");

                    b.Property<int>("ParameterCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("INT");

                    b.Property<int>("Step")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<string>("Value")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterCategoryId");

                    b.ToTable("AppParameter");
                });

            modelBuilder.Entity("Contable.Application.ParameterCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(4)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppParameterCategory");
                });

            modelBuilder.Entity("Contable.Application.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(765)");

                    b.Property<string>("Names")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INT");

                    b.Property<string>("Surname")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Surname2")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppPersons");
                });

            modelBuilder.Entity("Contable.Application.ProjectRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvaluatedTime")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("FixImpactRate")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("FixProbabilityRate")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Impact")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("ImpactWeight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("Probability")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("ProbabilityWeight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<int?>("StageId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Total")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StageId");

                    b.ToTable("AppProjectRisks");
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectRiskId")
                        .HasColumnType("INT");

                    b.Property<int>("ProjectStageDetailId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableOptionId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStageDetailId");

                    b.HasIndex("StaticVariableOptionId");

                    b.HasIndex("ProjectRiskId", "ProjectStageDetailId", "StaticVariableOptionId");

                    b.ToTable("AppProjectRiskDetails");
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvaluatedTime")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("FixImpactRate")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("FixProbabilityRate")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Impact")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("ImpactWeight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Probability")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("ProbabilityWeight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<int>("ProjectRiskId")
                        .HasColumnType("INT");

                    b.Property<int>("StageId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Total")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRiskId");

                    b.HasIndex("StageId");

                    b.ToTable("AppProjectRiskHistories");
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectRiskHistoryId")
                        .HasColumnType("INT");

                    b.Property<int>("ProjectStageDetailId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableOptionId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStageDetailId");

                    b.HasIndex("StaticVariableId");

                    b.HasIndex("StaticVariableOptionId");

                    b.HasIndex("ProjectRiskHistoryId", "ProjectStageDetailId", "StaticVariableOptionId");

                    b.ToTable("AppProjectRiskHistoryDetails");
                });

            modelBuilder.Entity("Contable.Application.ProjectStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(500)");

                    b.HasKey("Id");

                    b.ToTable("AppProjectStages");
                });

            modelBuilder.Entity("Contable.Application.ProjectStageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectStageId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStageId");

                    b.HasIndex("StaticVariableId");

                    b.ToTable("AppProjectStageDetails");
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EvaluatedTime")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("FixRate")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AppProspectiveRisks");
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProspectiveRiskId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableOptionId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("StaticVariableOptionId");

                    b.HasIndex("ProspectiveRiskId", "StaticVariableOptionId");

                    b.ToTable("AppProspectiveRiskDetails");
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvaluatedTime")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("FixValue")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProspectiveRiskId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProspectiveRiskId");

                    b.ToTable("AppProspectiveRiskHistories");
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProspectiveRiskHistoryId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableOptionId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("StaticVariableId");

                    b.HasIndex("StaticVariableOptionId");

                    b.HasIndex("ProspectiveRiskHistoryId", "StaticVariableOptionId");

                    b.ToTable("AppProspectiveRiskHistoryDetails");
                });

            modelBuilder.Entity("Contable.Application.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AppProvinces");
                });

            modelBuilder.Entity("Contable.Application.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RecordTime")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppRecords");
                });

            modelBuilder.Entity("Contable.Application.RecordResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("AppRecordResources");
                });

            modelBuilder.Entity("Contable.Application.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Ubigeo")
                        .HasColumnType("VARCHAR(6)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("AppRegions");
                });

            modelBuilder.Entity("Contable.Application.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppReports");
                });

            modelBuilder.Entity("Contable.Application.ResponsibleActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.ToTable("AppResponsibleActors");
                });

            modelBuilder.Entity("Contable.Application.ResponsibleSubActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("ResponsibleActorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleActorId");

                    b.ToTable("AppResponsibleSubActors");
                });

            modelBuilder.Entity("Contable.Application.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppRisks");
                });

            modelBuilder.Entity("Contable.Application.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppSectors");
                });

            modelBuilder.Entity("Contable.Application.Situation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompromiseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompromiseId");

                    b.ToTable("AppSituations");
                });

            modelBuilder.Entity("Contable.Application.SituationResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long>("SituationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("SituationId")
                        .IsUnique();

                    b.ToTable("AppSituationResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnalystId")
                        .HasColumnType("INT");

                    b.Property<string>("CaseName")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("CaseNameVerification")
                        .HasColumnType("BIT");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("ConditionVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("CoordinatorId")
                        .HasColumnType("INT");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("DescriptionVerification")
                        .HasColumnType("BIT");

                    b.Property<string>("Dialog")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("FactorContext")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<int>("GeographicType")
                        .HasColumnType("INT");

                    b.Property<int>("GovernmentLevel")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastCondition")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LastSocialConflictRiskId")
                        .HasColumnType("INT");

                    b.Property<bool>("ManagementVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<string>("Plaint")
                        .HasColumnType("VARCHAR(6000)");

                    b.Property<string>("Problem")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("ProblemVerification")
                        .HasColumnType("BIT");

                    b.Property<bool>("RiskVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("SectorId")
                        .HasColumnType("INT");

                    b.Property<bool>("StateVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Strategy")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<int?>("SubTypologyId")
                        .HasColumnType("INT");

                    b.Property<int?>("TypologyId")
                        .HasColumnType("INT");

                    b.Property<int>("Verification")
                        .HasColumnType("INT");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AnalystId");

                    b.HasIndex("Code");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SectorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubTypologyId");

                    b.HasIndex("TypologyId");

                    b.ToTable("AppSocialConflicts");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorMovementId")
                        .HasColumnType("INT");

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("INT");

                    b.Property<string>("Community")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Interest")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoliticalAssociation")
                        .HasColumnType("BIT");

                    b.Property<string>("Job")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PoliticalAssociation")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Position")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ActorMovementId");

                    b.HasIndex("ActorTypeId");

                    b.HasIndex("SocialConflictAlertId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictActors");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actions")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<string>("AditionalInformation")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<int?>("AlertDemandId")
                        .HasColumnType("INT");

                    b.Property<int?>("AlertResponsibleId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("AnalystId")
                        .HasColumnType("INT");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("CoordinatorId")
                        .HasColumnType("INT");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Demand")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<string>("Information")
                        .HasColumnType("VARCHAR(6000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastAlertRiskId")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LastSealId")
                        .HasColumnType("INT");

                    b.Property<string>("Link")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<string>("Recommendations")
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<string>("Source")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("SourceType")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int?>("SubTypologyId")
                        .HasColumnType("INT");

                    b.Property<int?>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.Property<int?>("TypologyId")
                        .HasColumnType("INT");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AlertDemandId");

                    b.HasIndex("AlertResponsibleId");

                    b.HasIndex("AnalystId");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("SubTypologyId");

                    b.HasIndex("TerritorialUnitId");

                    b.HasIndex("TypologyId");

                    b.ToTable("AppSocialConflictAlerts");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Copy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Files")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertHistories");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.Property<int>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.Property<string>("Ubication")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SocialConflictAlertId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppSocialConflictAlertLocations");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertRiskId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<DateTime>("RiskTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AlertRiskId");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertRisks");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertSeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertSealId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SealTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AlertSealId");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertSeals");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlertSectorId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SectorTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AlertSectorId");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertSectors");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("StateTime")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictAlertId");

                    b.ToTable("AppSocialConflictAlertStates");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConditionTime")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictConditions");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictGeneralFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(6000)");

                    b.Property<DateTime>("FactTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictGeneralFacts");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("int");

                    b.Property<int?>("TerritorialUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Ubication")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppSocialConflictLocations");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CivilMen")
                        .HasColumnType("INT");

                    b.Property<int?>("CivilWomen")
                        .HasColumnType("INT");

                    b.Property<int?>("CompanyMen")
                        .HasColumnType("INT");

                    b.Property<int?>("CompanyWomen")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagementId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("ManagementTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int?>("StateMen")
                        .HasColumnType("INT");

                    b.Property<int?>("StateWomen")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("ManagementId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictManagements");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictManagementResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictManagementId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictManagementId");

                    b.ToTable("AppSocialConflictManagementResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictNotes");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RiskId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("RiskTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictRisks");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnalystId")
                        .HasColumnType("INT");

                    b.Property<string>("CaseName")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("CaseNameVerification")
                        .HasColumnType("BIT");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("ConditionVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("CoordinatorId")
                        .HasColumnType("INT");

                    b.Property<int>("Count")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Generation")
                        .HasColumnType("BIT");

                    b.Property<int>("GeographicType")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastCondition")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LastSocialConflictSensibleRiskId")
                        .HasColumnType("INT");

                    b.Property<bool>("ManagementVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<string>("Problem")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("ProblemVerification")
                        .HasColumnType("BIT");

                    b.Property<bool>("RiskVerification")
                        .HasColumnType("BIT");

                    b.Property<bool>("StateVerification")
                        .HasColumnType("BIT");

                    b.Property<int?>("TypologyId")
                        .HasColumnType("INT");

                    b.Property<int>("Verification")
                        .HasColumnType("INT");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("AnalystId");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TypologyId");

                    b.ToTable("AppSocialConflictSensibles");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConditionTime")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleConditions");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleGeneralFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(6000)");

                    b.Property<DateTime>("FactTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleGeneralFacts");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<int>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.Property<string>("Ubication")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppSocialConflictSensibleLocations");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CivilMen")
                        .HasColumnType("INT");

                    b.Property<int?>("CivilWomen")
                        .HasColumnType("INT");

                    b.Property<int?>("CompanyMen")
                        .HasColumnType("INT");

                    b.Property<int?>("CompanyWomen")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagementId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("ManagementTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<int?>("StateMen")
                        .HasColumnType("INT");

                    b.Property<int?>("StateWomen")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("ManagementId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleManagements");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleManagementResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictSensibleManagementId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleManagementId");

                    b.ToTable("AppSocialConflictSensibleManagementResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleNotes");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RiskId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("RiskTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleRisks");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<string>("State")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<DateTime>("StateTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleStates");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleSugerence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Accepted")
                        .HasColumnType("BIT");

                    b.Property<long?>("AcceptedUserId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleSugerences");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleVerificationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("NewState")
                        .HasColumnType("BIT");

                    b.Property<bool>("OldState")
                        .HasColumnType("BIT");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictSensibleVerificationHistories");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<string>("State")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<DateTime>("StateTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Verification")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictStates");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSugerence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Accepted")
                        .HasColumnType("BIT");

                    b.Property<long?>("AcceptedUserId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictSugerences");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendedCreation")
                        .HasColumnType("BIT");

                    b.Property<bool>("SendedDeadline")
                        .HasColumnType("BIT");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictAlertId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<int?>("SocialConflictSensibleId")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictAlertId");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("SocialConflictSensibleId");

                    b.ToTable("AppSocialConflictTaskManagements");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictTaskManagementId")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictTaskManagementId");

                    b.HasIndex("UserId");

                    b.ToTable("AppSocialConflictTaskManagementComments");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementExtend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictTaskManagementId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictTaskManagementId");

                    b.ToTable("AppSocialConflictTaskManagementExtends");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Copy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictTaskManagementId")
                        .HasColumnType("INT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictTaskManagementId");

                    b.ToTable("AppSocialConflictTaskManagementHistories");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictTaskManagementId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SocialConflictTaskManagementId");

                    b.ToTable("AppSocialConflictTaskManagementPersons");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CommonFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Resource")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SectionFolder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Size")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictTaskManagementId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictTaskManagementId");

                    b.ToTable("AppSocialConflictTaskManagementResources");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.HasIndex("UserId");

                    b.ToTable("AppSocialConflictUsers");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictVerificationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("NewState")
                        .HasColumnType("BIT");

                    b.Property<bool>("OldState")
                        .HasColumnType("BIT");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictVerificationHistories");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictViolenceFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actions")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DeadMen")
                        .HasColumnType("INT");

                    b.Property<int>("DeadWomen")
                        .HasColumnType("INT");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("FactId")
                        .HasColumnType("INT");

                    b.Property<int>("InjuredMen")
                        .HasColumnType("INT");

                    b.Property<int>("InjuredWomen")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INT");

                    b.Property<string>("Responsible")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("SocialConflictId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("FactId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SocialConflictId");

                    b.ToTable("AppSocialConflictViolenceFacts");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictViolenceFactLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INT");

                    b.Property<int?>("RegionId")
                        .HasColumnType("INT");

                    b.Property<int>("SocialConflictViolenceFactId")
                        .HasColumnType("INT");

                    b.Property<string>("Ubication")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SocialConflictViolenceFactId");

                    b.ToTable("AppSocialConflictViolenceFactLocations");
                });

            modelBuilder.Entity("Contable.Application.StaticVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Family")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.ToTable("AppStaticVariables");
                });

            modelBuilder.Entity("Contable.Application.StaticVariableOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DinamicVariableId")
                        .HasColumnType("INT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int>("Site")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableId")
                        .HasColumnType("INT");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("DinamicVariableId");

                    b.HasIndex("StaticVariableId");

                    b.ToTable("AppStaticVariableOptions");
                });

            modelBuilder.Entity("Contable.Application.StaticVariableOptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("INT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("StaticVariableId")
                        .HasColumnType("INT");

                    b.Property<int>("StaticVariableOptionId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(27,2)");

                    b.HasKey("Id");

                    b.HasIndex("StaticVariableId");

                    b.HasIndex("StaticVariableOptionId");

                    b.ToTable("AppStaticVariableOptionDetails");
                });

            modelBuilder.Entity("Contable.Application.SubTypology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("TypologyId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("TypologyId");

                    b.ToTable("AppSubTypologies");
                });

            modelBuilder.Entity("Contable.Application.TaskManagement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompromiseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendedCreation")
                        .HasColumnType("BIT");

                    b.Property<bool>("SendedDeadline")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompromiseId");

                    b.ToTable("AppTaskManagement");
                });

            modelBuilder.Entity("Contable.Application.TaskManagementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Copy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<long>("TaskManagementId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Template")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagementId");

                    b.ToTable("AppTaskManagementHistories");
                });

            modelBuilder.Entity("Contable.Application.TaskManagementPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("INT");

                    b.Property<long>("TaskManagementId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TaskManagementId");

                    b.ToTable("AppTaskManagementPersons");
                });

            modelBuilder.Entity("Contable.Application.TaskManagemetExtend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskManagementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagementId");

                    b.ToTable("AppTaskManagemetExtend");
                });

            modelBuilder.Entity("Contable.Application.TerritorialUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppTerritorialUnits");
                });

            modelBuilder.Entity("Contable.Application.TerritorialUnitCoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("INT");

                    b.Property<int>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppTerritorialUnitCoordinators");
                });

            modelBuilder.Entity("Contable.Application.TerritorialUnitDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<int>("TerritorialUnitId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TerritorialUnitId");

                    b.ToTable("AppTerritorialUnitDepartments");
                });

            modelBuilder.Entity("Contable.Application.Typology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("AppTypologies");
                });

            modelBuilder.Entity("Contable.Authorization.Delegation.UserDelegation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SourceUserId");

                    b.HasIndex("TenantId", "TargetUserId");

                    b.ToTable("AppUserDelegations");
                });

            modelBuilder.Entity("Contable.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Contable.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AlertResponsibleId")
                        .HasColumnType("INT");

                    b.Property<string>("AuthenticationSource")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("nvarchar(328)")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(328)")
                        .HasMaxLength(328);

                    b.Property<int?>("PersonId")
                        .HasColumnType("INT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("SignInToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Surname2")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("INT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AlertResponsibleId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Contable.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("SharedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("TargetTenantId")
                        .HasColumnType("int");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("Contable.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FriendProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendTenancyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendTenantId")
                        .HasColumnType("int");

                    b.Property<long>("FriendUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("Contable.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantTaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("Contable.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("EditionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ErrorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("Contable.MultiTenancy.Payments.SubscriptionPaymentExtensionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SubscriptionPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPaymentId", "Key", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("AppSubscriptionPaymentsExtensionData");
                });

            modelBuilder.Entity("Contable.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CustomCssId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Contable.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("Contable.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExpiringEditionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrialDayCount")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingDayAfterExpire")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Contable.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameterValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameter", "DynamicParameter")
                        .WithMany("DynamicParameterValues")
                        .HasForeignKey("DynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameter", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameter", "DynamicParameter")
                        .WithMany()
                        .HasForeignKey("DynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameterValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.EntityDynamicParameter", "EntityDynamicParameter")
                        .WithMany()
                        .HasForeignKey("EntityDynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.Comment", b =>
                {
                    b.HasOne("Contable.Application.TaskManagement", "TaskManagement")
                        .WithMany("Comments")
                        .HasForeignKey("TaskManagementId");

                    b.HasOne("Contable.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Contable.Application.Compromise", b =>
                {
                    b.HasOne("Contable.Application.PIPMEF", "PIPMEF")
                        .WithMany("Compromises")
                        .HasForeignKey("PIPMEFId");

                    b.HasOne("Contable.Application.Record", "Record")
                        .WithMany("Compromises")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ResponsibleActor", "ResponsibleActor")
                        .WithMany()
                        .HasForeignKey("ResponsibleActorId");

                    b.HasOne("Contable.Application.ResponsibleSubActor", "ResponsibleSubActor")
                        .WithMany()
                        .HasForeignKey("ResponsibleSubActorId");

                    b.HasOne("Contable.Application.SocialConflict", null)
                        .WithMany("Compromises")
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.Parameter", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Contable.Application.CompromiseInvolved", b =>
                {
                    b.HasOne("Contable.Application.Compromise", "Compromise")
                        .WithMany("CompromiseInvolveds")
                        .HasForeignKey("CompromiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ResponsibleActor", "ResponsibleActor")
                        .WithMany("CompromiseInvolveds")
                        .HasForeignKey("ResponsibleActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CompromiseLocation", b =>
                {
                    b.HasOne("Contable.Application.Compromise", "Compromise")
                        .WithMany("CompromiseLocations")
                        .HasForeignKey("CompromiseId");

                    b.HasOne("Contable.Application.SocialConflictLocation", "SocialConflictLocation")
                        .WithMany("CompromiseLocations")
                        .HasForeignKey("SocialConflictLocationId");
                });

            modelBuilder.Entity("Contable.Application.CompromiseTimeLine", b =>
                {
                    b.HasOne("Contable.Application.Compromise", "Compromise")
                        .WithMany("Timelines")
                        .HasForeignKey("CompromiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Parameter", "Milestone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Parameter", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommittee", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany()
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeAction", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Actions")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeAgreement", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Agreements")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeChannel", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Channels")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeMessage", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Messages")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteePlan", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Plans")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeSector", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Sectors")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.DirectoryGovernment", "DirectoryGovernment")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeTask", b =>
                {
                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Tasks")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.CrisisCommitteeTeam", b =>
                {
                    b.HasOne("Contable.Application.AlertResponsible", "AlertResponsible")
                        .WithMany()
                        .HasForeignKey("AlertResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.CrisisCommittee", "CrisisCommittee")
                        .WithMany("Teams")
                        .HasForeignKey("CrisisCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.CrisisCommitteeJob", "CrisisCommitteeJob")
                        .WithMany()
                        .HasForeignKey("CrisisCommitteeJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.DinamicVariableDetail", b =>
                {
                    b.HasOne("Contable.Application.DinamicVariable", "DinamicVariable")
                        .WithMany("Details")
                        .HasForeignKey("DinamicVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.DirectoryDialog", b =>
                {
                    b.HasOne("Contable.Application.DirectoryGovernment", "DirectoryGovernment")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.DirectoryResponsible", "DirectoryResponsible")
                        .WithMany()
                        .HasForeignKey("DirectoryResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.DirectoryGovernment", b =>
                {
                    b.HasOne("Contable.Application.DirectoryGovernmentSector", "DirectoryGovernmentSector")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.DirectoryIndustry", b =>
                {
                    b.HasOne("Contable.Application.DirectorySector", "DirectorySector")
                        .WithMany()
                        .HasForeignKey("DirectorySectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.District", b =>
                {
                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("Contable.Application.HelpMemory", b =>
                {
                    b.HasOne("Contable.Application.DirectoryGovernment", "DirectoryGovernment")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany()
                        .HasForeignKey("SocialConflictSensibleId");
                });

            modelBuilder.Entity("Contable.Application.HelpMemoryResource", b =>
                {
                    b.HasOne("Contable.Application.HelpMemory", "HelpMemory")
                        .WithMany("Resources")
                        .HasForeignKey("HelpMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlan", b =>
                {
                    b.HasOne("Contable.Application.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany()
                        .HasForeignKey("SocialConflictSensibleId");
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanActor", b =>
                {
                    b.HasOne("Contable.Application.ActorMovement", "ActorMovement")
                        .WithMany()
                        .HasForeignKey("ActorMovementId");

                    b.HasOne("Contable.Application.ActorType", "ActorType")
                        .WithMany()
                        .HasForeignKey("ActorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Actors")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanLocation", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Locations")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanMethodology", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Methodologies")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlanOption", "InterventionPlanOption")
                        .WithMany()
                        .HasForeignKey("InterventionPlanOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanObjective", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Objectives")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanRisk", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Risks")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Risk", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanSchedule", b =>
                {
                    b.HasOne("Contable.Application.AlertResponsible", "AlertResponsible")
                        .WithMany()
                        .HasForeignKey("AlertResponsibleId");

                    b.HasOne("Contable.Application.DirectoryGovernment", "DirectoryGovernment")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentId");

                    b.HasOne("Contable.Application.InterventionPlanActivity", "InterventionPlanActivity")
                        .WithMany()
                        .HasForeignKey("InterventionPlanActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlanEntity", "InterventionPlanEntity")
                        .WithMany()
                        .HasForeignKey("InterventionPlanEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Schedules")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanSolution", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Solutions")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanState", b =>
                {
                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("States")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.InterventionPlanTeam", b =>
                {
                    b.HasOne("Contable.Application.AlertResponsible", "AlertResponsible")
                        .WithMany()
                        .HasForeignKey("AlertResponsibleId");

                    b.HasOne("Contable.Application.DirectoryGovernment", "DirectoryGovernment")
                        .WithMany()
                        .HasForeignKey("DirectoryGovernmentId");

                    b.HasOne("Contable.Application.InterventionPlanEntity", "InterventionPlanEntity")
                        .WithMany()
                        .HasForeignKey("InterventionPlanEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlan", "InterventionPlan")
                        .WithMany("Teams")
                        .HasForeignKey("InterventionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.InterventionPlanRole", "InterventionPlanRole")
                        .WithMany()
                        .HasForeignKey("InterventionPlanRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.Order", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Contable.Application.PIPMEF", "PIPMEF")
                        .WithMany("Orders")
                        .HasForeignKey("PIPMEFId");

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId");
                });

            modelBuilder.Entity("Contable.Application.PIPMEF", b =>
                {
                    b.HasOne("Contable.Application.Parameter", "PIPMilestone")
                        .WithMany()
                        .HasForeignKey("PIPMilestoneId");

                    b.HasOne("Contable.Application.Parameter", "PIPPhase")
                        .WithMany()
                        .HasForeignKey("PIPPhaseId");
                });

            modelBuilder.Entity("Contable.Application.Parameter", b =>
                {
                    b.HasOne("Contable.Application.ParameterCategory", "ParameterCategory")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.Person", b =>
                {
                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId");
                });

            modelBuilder.Entity("Contable.Application.ProjectRisk", b =>
                {
                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskDetail", b =>
                {
                    b.HasOne("Contable.Application.ProjectRisk", "ProjectRisk")
                        .WithMany("Details")
                        .HasForeignKey("ProjectRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ProjectStageDetail", "ProjectStageDetail")
                        .WithMany()
                        .HasForeignKey("ProjectStageDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariableOption", "StaticVariableOption")
                        .WithMany()
                        .HasForeignKey("StaticVariableOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskHistory", b =>
                {
                    b.HasOne("Contable.Application.ProjectRisk", "ProjectRisk")
                        .WithMany("Histories")
                        .HasForeignKey("ProjectRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ProjectStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProjectRiskHistoryDetail", b =>
                {
                    b.HasOne("Contable.Application.ProjectRiskHistory", "ProjectRiskHistory")
                        .WithMany("Details")
                        .HasForeignKey("ProjectRiskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.ProjectStageDetail", "ProjectStageDetail")
                        .WithMany()
                        .HasForeignKey("ProjectStageDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariable", "StaticVariable")
                        .WithMany()
                        .HasForeignKey("StaticVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariableOption", "StaticVariableOption")
                        .WithMany()
                        .HasForeignKey("StaticVariableOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProjectStageDetail", b =>
                {
                    b.HasOne("Contable.Application.ProjectStage", "ProjectStage")
                        .WithMany("Details")
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariable", "StaticVariable")
                        .WithMany()
                        .HasForeignKey("StaticVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRisk", b =>
                {
                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskDetail", b =>
                {
                    b.HasOne("Contable.Application.ProspectiveRisk", "ProspectiveRisk")
                        .WithMany()
                        .HasForeignKey("ProspectiveRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariableOption", "StaticVariableOption")
                        .WithMany("ProspectiveRiskDetails")
                        .HasForeignKey("StaticVariableOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskHistory", b =>
                {
                    b.HasOne("Contable.Application.ProspectiveRisk", "ProspectiveRisk")
                        .WithMany("ProspectiveRiskHistories")
                        .HasForeignKey("ProspectiveRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ProspectiveRiskHistoryDetail", b =>
                {
                    b.HasOne("Contable.Application.ProspectiveRiskHistory", "ProspectiveRiskHistory")
                        .WithMany()
                        .HasForeignKey("ProspectiveRiskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariable", "StaticVariable")
                        .WithMany()
                        .HasForeignKey("StaticVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariableOption", "StaticVariableOption")
                        .WithMany()
                        .HasForeignKey("StaticVariableOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.Province", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany("Provinces")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Contable.Application.Record", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");
                });

            modelBuilder.Entity("Contable.Application.RecordResource", b =>
                {
                    b.HasOne("Contable.Application.Record", "Record")
                        .WithMany("Resources")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Contable.Application.Region", b =>
                {
                    b.HasOne("Contable.Application.District", "District")
                        .WithMany("Regions")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.ResponsibleSubActor", b =>
                {
                    b.HasOne("Contable.Application.ResponsibleActor", "ResponsibleActor")
                        .WithMany("ResponsibleSubActors")
                        .HasForeignKey("ResponsibleActorId");
                });

            modelBuilder.Entity("Contable.Application.Situation", b =>
                {
                    b.HasOne("Contable.Application.Compromise", "Compromise")
                        .WithMany("Situations")
                        .HasForeignKey("CompromiseId");
                });

            modelBuilder.Entity("Contable.Application.SituationResource", b =>
                {
                    b.HasOne("Contable.Application.Situation", "Situation")
                        .WithOne("Resource")
                        .HasForeignKey("Contable.Application.SituationResource", "SituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflict", b =>
                {
                    b.HasOne("Contable.Application.Person", "Analyst")
                        .WithMany()
                        .HasForeignKey("AnalystId");

                    b.HasOne("Contable.Application.Person", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Contable.Application.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("Contable.Application.Parameter", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Contable.Application.SubTypology", "SubTypology")
                        .WithMany()
                        .HasForeignKey("SubTypologyId");

                    b.HasOne("Contable.Application.Typology", "Typology")
                        .WithMany()
                        .HasForeignKey("TypologyId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictActor", b =>
                {
                    b.HasOne("Contable.Application.ActorMovement", "ActorMovement")
                        .WithMany()
                        .HasForeignKey("ActorMovementId");

                    b.HasOne("Contable.Application.ActorType", "ActorType")
                        .WithMany()
                        .HasForeignKey("ActorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Actors")
                        .HasForeignKey("SocialConflictAlertId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Actors")
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Actors")
                        .HasForeignKey("SocialConflictSensibleId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlert", b =>
                {
                    b.HasOne("Contable.Application.AlertDemand", "AlertDemand")
                        .WithMany()
                        .HasForeignKey("AlertDemandId");

                    b.HasOne("Contable.Application.AlertResponsible", "AlertResponsible")
                        .WithMany()
                        .HasForeignKey("AlertResponsibleId");

                    b.HasOne("Contable.Application.Person", "Analyst")
                        .WithMany()
                        .HasForeignKey("AnalystId");

                    b.HasOne("Contable.Application.Person", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.SubTypology", "SubTypology")
                        .WithMany()
                        .HasForeignKey("SubTypologyId");

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId");

                    b.HasOne("Contable.Application.Typology", "Typology")
                        .WithMany()
                        .HasForeignKey("TypologyId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertHistory", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Histories")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertLocation", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Locations")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertRisk", b =>
                {
                    b.HasOne("Contable.Application.AlertRisk", "AlertRisk")
                        .WithMany()
                        .HasForeignKey("AlertRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Risks")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertSeal", b =>
                {
                    b.HasOne("Contable.Application.AlertSeal", "AlertSeal")
                        .WithMany()
                        .HasForeignKey("AlertSealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Seals")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertSector", b =>
                {
                    b.HasOne("Contable.Application.AlertSector", "AlertSector")
                        .WithMany()
                        .HasForeignKey("AlertSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("Sectors")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictAlertState", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany("States")
                        .HasForeignKey("SocialConflictAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictCondition", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Conditions")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictGeneralFact", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("GeneralFacts")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictLocation", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany("Locations")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Contable.Application.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Locations")
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictManagement", b =>
                {
                    b.HasOne("Contable.Application.Management", "Management")
                        .WithMany()
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Managements")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictManagementResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictManagement", "SocialConflictManagement")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictNote", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Notes")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictRisk", b =>
                {
                    b.HasOne("Contable.Application.Risk", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Risks")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensible", b =>
                {
                    b.HasOne("Contable.Application.Person", "Analyst")
                        .WithMany()
                        .HasForeignKey("AnalystId");

                    b.HasOne("Contable.Application.Person", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Contable.Application.Typology", "Typology")
                        .WithMany()
                        .HasForeignKey("TypologyId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleCondition", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Conditions")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleGeneralFact", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("GeneralFacts")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleLocation", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Locations")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany()
                        .HasForeignKey("TerritorialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleManagement", b =>
                {
                    b.HasOne("Contable.Application.Management", "Management")
                        .WithMany()
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Managements")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleManagementResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensibleManagement", "SocialConflictSensibleManagement")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictSensibleManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleNote", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Notes")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleRisk", b =>
                {
                    b.HasOne("Contable.Application.Risk", "Risk")
                        .WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Risks")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleState", b =>
                {
                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("States")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleSugerence", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("Sugerences")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSensibleVerificationHistory", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany("VerificationHistories")
                        .HasForeignKey("SocialConflictSensibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictState", b =>
                {
                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("States")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictSugerence", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("Sugerences")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagement", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictAlert", "SocialConflictAlert")
                        .WithMany()
                        .HasForeignKey("SocialConflictAlertId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany()
                        .HasForeignKey("SocialConflictId");

                    b.HasOne("Contable.Application.SocialConflictSensible", "SocialConflictSensible")
                        .WithMany()
                        .HasForeignKey("SocialConflictSensibleId");
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementComment", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictTaskManagement", "SocialConflictTaskManagement")
                        .WithMany("Comments")
                        .HasForeignKey("SocialConflictTaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementExtend", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictTaskManagement", "SocialConflictTaskManagement")
                        .WithMany("Extends")
                        .HasForeignKey("SocialConflictTaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementHistory", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictTaskManagement", "SocialConflictTaskManagement")
                        .WithMany("Histories")
                        .HasForeignKey("SocialConflictTaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementPerson", b =>
                {
                    b.HasOne("Contable.Application.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.SocialConflictTaskManagement", "SocialConflictTaskManagement")
                        .WithMany("Persons")
                        .HasForeignKey("SocialConflictTaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictTaskManagementResource", b =>
                {
                    b.HasOne("Contable.Application.SocialConflictTaskManagement", "SocialConflictTaskManagement")
                        .WithMany("Resources")
                        .HasForeignKey("SocialConflictTaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictUser", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("SocialConflictUsers")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Authorization.Users.User", "User")
                        .WithMany("UserSocialConflicts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictVerificationHistory", b =>
                {
                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("VerificationHistories")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictViolenceFact", b =>
                {
                    b.HasOne("Contable.Application.Fact", "Fact")
                        .WithMany()
                        .HasForeignKey("FactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Contable.Application.SocialConflict", "SocialConflict")
                        .WithMany("ViolenceFacts")
                        .HasForeignKey("SocialConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SocialConflictViolenceFactLocation", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Contable.Application.SocialConflictViolenceFact", "SocialConflictViolenceFact")
                        .WithMany("Locations")
                        .HasForeignKey("SocialConflictViolenceFactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.StaticVariableOption", b =>
                {
                    b.HasOne("Contable.Application.DinamicVariable", "DinamicVariable")
                        .WithMany("StaticVariableOptions")
                        .HasForeignKey("DinamicVariableId");

                    b.HasOne("Contable.Application.StaticVariable", "StaticVariable")
                        .WithMany("Options")
                        .HasForeignKey("StaticVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.StaticVariableOptionDetail", b =>
                {
                    b.HasOne("Contable.Application.StaticVariable", "StaticVariable")
                        .WithMany("Details")
                        .HasForeignKey("StaticVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.StaticVariableOption", "StaticVariableOption")
                        .WithMany("Details")
                        .HasForeignKey("StaticVariableOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.SubTypology", b =>
                {
                    b.HasOne("Contable.Application.Typology", "Typology")
                        .WithMany("SubTypologies")
                        .HasForeignKey("TypologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.TaskManagement", b =>
                {
                    b.HasOne("Contable.Application.Compromise", "Compromise")
                        .WithMany("TaskManagements")
                        .HasForeignKey("CompromiseId");
                });

            modelBuilder.Entity("Contable.Application.TaskManagementHistory", b =>
                {
                    b.HasOne("Contable.Application.TaskManagement", "TaskManagement")
                        .WithMany("Histories")
                        .HasForeignKey("TaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.TaskManagementPerson", b =>
                {
                    b.HasOne("Contable.Application.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.TaskManagement", "TaskManagement")
                        .WithMany("Persons")
                        .HasForeignKey("TaskManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.TaskManagemetExtend", b =>
                {
                    b.HasOne("Contable.Application.TaskManagement", "TaskManagement")
                        .WithMany("ExtendDates")
                        .HasForeignKey("TaskManagementId");
                });

            modelBuilder.Entity("Contable.Application.TerritorialUnitCoordinator", b =>
                {
                    b.HasOne("Contable.Application.Person", "Person")
                        .WithMany("TerritorialUnits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany("Coordinators")
                        .HasForeignKey("TerritorialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Application.TerritorialUnitDepartment", b =>
                {
                    b.HasOne("Contable.Application.Department", "Department")
                        .WithMany("TerritorialUnitDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Application.TerritorialUnit", "TerritorialUnit")
                        .WithMany("TerritorialUnitDepartments")
                        .HasForeignKey("TerritorialUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Contable.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Contable.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Contable.Authorization.Users.User", b =>
                {
                    b.HasOne("Contable.Application.AlertResponsible", "AlertResponsible")
                        .WithMany()
                        .HasForeignKey("AlertResponsibleId");

                    b.HasOne("Contable.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Contable.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Contable.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Contable.Application.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Contable.Authorization.Users.User", "PersonId");
                });

            modelBuilder.Entity("Contable.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Contable.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Contable.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Contable.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Contable.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
